{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Foliant! \u00b6 Foliant is a all-in-one documentation authoring tool. It lets you produce standalone documents in pdf and docx, as well as websites, from single Markdown source. Foliant is a higher order tool, which means it uses other programs to do its job. For pdf and docx, it uses Pandoc , for websites it uses MkDocs . Foliant preprocessors let you include parts of documents in other documents, show and hide content with flags, render diagrams from text, and much more. Logo made by Hand Drawn Goods from www.flaticon.com. Who Is It for? \u00b6 You\u2019ll love Foliant if you: need to ship documentation as pdf, docx, and website forms want to use Markdown with consistent extension system instead of custome syntax for every new bit of functionality like reStructuredText\u2019s extensibility and Asciidoc\u2019s flexibility, but actually would rather use Markdown want a tool that you can actually write custom extensions for without dealing with something as overengineered as Sphinx have documentation spread across many repos and want to reuse parts between documents Changelog \u00b6 1.0.10 \u00b6 Add escape_code config option. To use it, escapecode and unescapecode preprocessors must be installed. 1.0.9 \u00b6 Process attribute values of pseudo-XML tags as YAML. Allow single quotes for enclosing attribute values of pseudo-XML tags. Add !project_path and !rel_path YAML tags. 1.0.8 \u00b6 Restore quiet mode. Add the output() method for using in preprocessors. 1.0.7 \u00b6 Remove spinner made with Halo. Abolish quiet mode because it is useless if extensions are allowed to write anything to STDOUT. Show full tracebacks in debug mode; write full tracebacks into logs. 1.0.6 \u00b6 CLI: If no args are provided, print help. Fix tags searching pattern in _unescape preprocessor. 1.0.5 \u00b6 Allow to override default config file name in CLI. Allow multiline tags. Process true and false attribute values as boolean, not as integer. Add tests. Improve code style. 1.0.4 \u00b6 Breaking change. Add logging to all stages of building a project. Config parser extensions, CLI extensions, backends, and preprocessors can now access self.logger and create child loggers with self.logger = self.logger.getChild('newbackend') . Add pre backend with pre target that applies the preprocessors from the config and returns a Foliant project that doesn't require any preprocessing. make now returns its result, which makes is easier to call it from extensions. 1.0.3 \u00b6 Fix critical issue when config parsing would fail if any config value contained non-latin characters. 1.0.2 \u00b6 Use README.md as package description. 1.0.1 \u00b6 Fix critical bug with CLI module caused by missing version definition in the root __init__.py file. 1.0.0 \u00b6 Complete rewrite.","title":"Welcome to Foliant!"},{"location":"#welcome-to-foliant","text":"Foliant is a all-in-one documentation authoring tool. It lets you produce standalone documents in pdf and docx, as well as websites, from single Markdown source. Foliant is a higher order tool, which means it uses other programs to do its job. For pdf and docx, it uses Pandoc , for websites it uses MkDocs . Foliant preprocessors let you include parts of documents in other documents, show and hide content with flags, render diagrams from text, and much more. Logo made by Hand Drawn Goods from www.flaticon.com.","title":"Welcome to Foliant!"},{"location":"#who-is-it-for","text":"You\u2019ll love Foliant if you: need to ship documentation as pdf, docx, and website forms want to use Markdown with consistent extension system instead of custome syntax for every new bit of functionality like reStructuredText\u2019s extensibility and Asciidoc\u2019s flexibility, but actually would rather use Markdown want a tool that you can actually write custom extensions for without dealing with something as overengineered as Sphinx have documentation spread across many repos and want to reuse parts between documents","title":"Who Is It for?"},{"location":"#changelog","text":"","title":"Changelog"},{"location":"#1010","text":"Add escape_code config option. To use it, escapecode and unescapecode preprocessors must be installed.","title":"1.0.10"},{"location":"#109","text":"Process attribute values of pseudo-XML tags as YAML. Allow single quotes for enclosing attribute values of pseudo-XML tags. Add !project_path and !rel_path YAML tags.","title":"1.0.9"},{"location":"#108","text":"Restore quiet mode. Add the output() method for using in preprocessors.","title":"1.0.8"},{"location":"#107","text":"Remove spinner made with Halo. Abolish quiet mode because it is useless if extensions are allowed to write anything to STDOUT. Show full tracebacks in debug mode; write full tracebacks into logs.","title":"1.0.7"},{"location":"#106","text":"CLI: If no args are provided, print help. Fix tags searching pattern in _unescape preprocessor.","title":"1.0.6"},{"location":"#105","text":"Allow to override default config file name in CLI. Allow multiline tags. Process true and false attribute values as boolean, not as integer. Add tests. Improve code style.","title":"1.0.5"},{"location":"#104","text":"Breaking change. Add logging to all stages of building a project. Config parser extensions, CLI extensions, backends, and preprocessors can now access self.logger and create child loggers with self.logger = self.logger.getChild('newbackend') . Add pre backend with pre target that applies the preprocessors from the config and returns a Foliant project that doesn't require any preprocessing. make now returns its result, which makes is easier to call it from extensions.","title":"1.0.4"},{"location":"#103","text":"Fix critical issue when config parsing would fail if any config value contained non-latin characters.","title":"1.0.3"},{"location":"#102","text":"Use README.md as package description.","title":"1.0.2"},{"location":"#101","text":"Fix critical bug with CLI module caused by missing version definition in the root __init__.py file.","title":"1.0.1"},{"location":"#100","text":"Complete rewrite.","title":"1.0.0"},{"location":"installation/","text":"Installation \u00b6 Installing Foliant to your system can be split into three stages: installing Python with your system\u2019s package manager, installing Foliant with pip, and optionally installing Pandoc and TeXLive bundle. Below you\u2019ll find the instructions for three popular platforms: macOS, Windows, and Ubuntu. Alternatively, you can avoid installing Foliant and its dependencies on your system by using Docker and Docker Compose . macOS \u00b6 Install Python 3 with Homebrew: $ brew install python3 Install Foliant with pip: $ python3 -m pip install foliant foliantcontrib.init If you plan to bake pdf or docx, install Pandoc and MacTeX with Homebrew: $ brew install pandoc mactex librsvg Windows \u00b6 Install Scoop package manager in PowerShell: $ iex ( new-object net.webclient ) .downloadstring ( 'https://get.scoop.sh' ) Install Python 3 with Scoop: $ scoop install python Install Foliant with pip: $ python -m pip install foliant foliantcontrib.init If you plan to bake pdf or docx, install Pandoc and MikTeX with Scoop: $ scoop install pandoc latex Ubuntu \u00b6 Install Python 3 with apt. On 14.04 and 16.04: $ apt update && apt install -y python3 python3-pip On 14.04 and 16.04: $ add-apt-repository ppa:jonathonf/python-3.6 $ apt update && apt install -y python3 python3-pip Install Foliant with pip: $ python3.6 -m pip install foliant foliantcontrib.init If you plan to bake pdf or docx, install Pandoc and TeXLive with apt and wget: $ apt update && apt install -y wget texlive-full librsvg2-bin $ wget https://github.com/jgm/pandoc/releases/download/2.0.5/pandoc-2.0.5-1-amd64.deb && dpkg -i pandoc-2.0.5-1-amd64.deb Docker \u00b6 $ docker pull foliant/foliant","title":"Installation"},{"location":"installation/#installation","text":"Installing Foliant to your system can be split into three stages: installing Python with your system\u2019s package manager, installing Foliant with pip, and optionally installing Pandoc and TeXLive bundle. Below you\u2019ll find the instructions for three popular platforms: macOS, Windows, and Ubuntu. Alternatively, you can avoid installing Foliant and its dependencies on your system by using Docker and Docker Compose .","title":"Installation"},{"location":"installation/#macos","text":"Install Python 3 with Homebrew: $ brew install python3 Install Foliant with pip: $ python3 -m pip install foliant foliantcontrib.init If you plan to bake pdf or docx, install Pandoc and MacTeX with Homebrew: $ brew install pandoc mactex librsvg","title":"macOS"},{"location":"installation/#windows","text":"Install Scoop package manager in PowerShell: $ iex ( new-object net.webclient ) .downloadstring ( 'https://get.scoop.sh' ) Install Python 3 with Scoop: $ scoop install python Install Foliant with pip: $ python -m pip install foliant foliantcontrib.init If you plan to bake pdf or docx, install Pandoc and MikTeX with Scoop: $ scoop install pandoc latex","title":"Windows"},{"location":"installation/#ubuntu","text":"Install Python 3 with apt. On 14.04 and 16.04: $ apt update && apt install -y python3 python3-pip On 14.04 and 16.04: $ add-apt-repository ppa:jonathonf/python-3.6 $ apt update && apt install -y python3 python3-pip Install Foliant with pip: $ python3.6 -m pip install foliant foliantcontrib.init If you plan to bake pdf or docx, install Pandoc and TeXLive with apt and wget: $ apt update && apt install -y wget texlive-full librsvg2-bin $ wget https://github.com/jgm/pandoc/releases/download/2.0.5/pandoc-2.0.5-1-amd64.deb && dpkg -i pandoc-2.0.5-1-amd64.deb","title":"Ubuntu"},{"location":"installation/#docker","text":"$ docker pull foliant/foliant","title":"Docker"},{"location":"quickstart/","text":"Quickstart \u00b6 In this tutorial, you\u2019ll learn how to use Foliant to build websites and pdf documents from a single Markdown source. You\u2019ll also learn how to use Foliant preprocessors. Create New Project \u00b6 All Foliant projects must adhere to a certain structure. Luckily, you don\u2019t have to memorize it thanks to Init extension. You should have installed it during Foliant installation and it\u2019s included in Foliant\u2019s default Docker image. To use it, run foliant init command: $ foliant init Enter the project name: Hello Foliant \u2714 Generating Foliant project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Hello Foliant\" created in hello-foliant To do the same with Docker, run: $ docker run --rm -it -v ` pwd ` :/usr/app/src -w /usr/app/src foliant/foliant init Enter the project name: Hello Foliant \u2714 Generating Foliant project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Hello Foliant\" created in hello-foliant Here\u2019s what this command created: $ cd hello-foliant $ tree . \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 foliant.yml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 src \u2514\u2500\u2500 index.md 1 directory, 6 files foliant.yml is your project\u2019s config file. src directory is where the content of the project lives. Currently, there\u2019s just one file index.md . requirements.txt lists the Python packages required for the project: Foliant backends and preprocessors, MkDocs themes, and what not. The the Docker image for the project is built, these requirements are installed in it. Dockerfile and docker-compose.yml are necessary to build the project in a Docker container. Build Site \u00b6 In the project directory, run: $ foliant make site \u2714 Parsing config \u2714 Applying preprocessor mkdocs \u2714 Making site with MkDocs \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2018-01-23.mkdocs Or, with Docker Compose: $ docker-compose run --rm hello-foliant make site \u2714 Parsing config \u2714 Applying preprocessor mkdocs \u2714 Making site with MkDocs \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2018-01-23.mkdocs That\u2019s it! Your static, MkDocs-powered website is ready. To view it, use any web server, for example, Python\u2019s built-in one: $ cd Hello_Foliant-2018-01-23.mkdocs $ python -m http.server Serving HTTP on 0 .0.0.0 port 8000 ( http://0.0.0.0:8000/ ) ... Open localhost:8000 in your web browser. You should see something like this: Build Pdf \u00b6 Note To build pdfs with Pandoc, make sure you have it and TeXLive installed (see Installation ). In the project directory, run: $ foliant make pdf \u2714 Parsing config \u2714 Applying preprocessor flatten \u2714 Making pdf with Pandoc \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2018-01-23.pdf To build pdf in Docker container, first uncomment foliant/foliant:pandoc in your project\u2019s Dockerfile : - FROM foliant/foliant + # FROM foliant/foliant # If you plan to bake PDFs, uncomment this line and comment the line above: - # FROM foliant/foliant:pandoc + FROM foliant/foliant:pandoc COPY requirements.txt . RUN pip3 install -r requirements.txt Note Run docker-compose build to rebuild the image from the new base image if you have previously run docker-compose run with the old one. Also, run it whenever you need to update the versions of the required packages from requirements.txt . Then, run this command in the project directory: $ docker-compose run --rm hello-foliant make pdf \u2714 Parsing config \u2714 Applying preprocessor flatten \u2714 Making pdf with Pandoc \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2018-01-23.pdf Your standalone pdf documentation is ready! It should look something like this: Edit Content \u00b6 Your project\u2019s content lives in *.md files in src folder. You can split it between multiple files and subfolders. Foliant encourages pure Markdown syntax as described by John Gruber. Pandoc, MkDocs, and other backend-specific additions are allowed, but we strongly recommend to put them in <if></if> blocks . Create a file hello.md in src with the following content: # Hello Again This is regular text generated from regular Markdown . Foliant doesn \u2019 t force any * special * Markdown flavor . Open foliant.yml and add hello.md to chapters : title: Hello Foliant chapters: - index.md + - hello.md Rebuild the project to see the new page: $ docker-compose run --rm hello-foliant make site && docker-compose run --rm hello-foliant make pdf \u2714 Parsing config \u2714 Applying preprocessor mkdocs \u2714 Making site with MkDocs \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2018-02-08.mkdocs \u2714 Parsing config \u2714 Applying preprocessor flatten \u2714 Making pdf with Pandoc \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2018-02-08.pdf And see the new page appear on the site and in the pdf document: Use Preprocessors \u00b6 Preprocessors is what makes Foliant special and extremely useful. Preprocessors are additional packages that, well, preprocess the source code of your project. You can do all kinds of stuff with preprocessors: include remote Markdown files or their parts in the source files render diagrams from textual description on build restructure the project source or compile it into a single file for a particular backend In fact, you have already used two preprocessors! Check the output of the foliant make commands and note the lines Applying preprocessor mkdocs and Applying preprocessor flatten . The first one informs you that the project source has been preprocessed with mkdocs preprocessor in order to make it compatible with MkDocs\u2019 requirements, and the second one tells you that flatten preprocessor was used to squash the project source into one a single file (because Pandoc only works with single files). These preprocessors where called by MkDocs and Pandoc backends respectively. You didn\u2019t have to install or activate them explicitly. Now, let\u2019s try to use a different kind of preprocessors, the ones that register new tags: Blockdiag . Embed Diagrams with Blockdiag \u00b6 Blockdiag is a Python app for generating diagrams. Blockdiag preprocessor extracts diagram descriptions from the project source and replaces them with the generated images. In hello.md , add the following lines: Foliant doesn\u2019t force any *special* Markdown flavor. + <seqdiag caption=\"This diagram is generated on the fly\"> + seqdiag { + \"foliant make site\" -> \"mkdocs preprocessor\" -> \"blockdiag preprocessor\" -> \"mkdocs backend\" -> site; + } + </seqdiag> Blockdiag preprocessor adds several tags to Foliant, each corresponding to a certain diagram type. Sequence diagrams are defined with <seqdiag></seqdiag> tag. This is what we used in the sample above. The diagram definition sits in the tag body and the diagram properties such as caption or format are defined as tag parameters. Rebuild the site with foliant make site and open it in the browser: Rebuild the pdf as well and see that the diagram there: Let\u2019s customize the look of the diagrams in our project by setting their properties in the config file. For example, let\u2019s use a custom font for labels. I\u2019m using the ever popular Comic Sans font, but you can pick any font that\u2019s available in .ttf format. Put the font file in the project directory and add the following lines to foliant.yml : preprocessors: - - blockdiag + - blockdiag: + params: + font: !path comic.ttf After a rebuild, the diagram on the site and in the pdf should look like this: There are many more params you can define for your diagrams. You can override global params for particluar diagrams in their tags. And by combining this preprocessor with Flags you can even set different params for different backends, for example build vector diagrams for pdf output and bitmap for site: This is a diagram that is rendered to `. png ` in html and to `. pdf ` in pdf : << blockdiag format = \" <if targets= \" html \" >png</if><<if targets= \" pdf \" >pdf</if \" > ... </ blockdiag > The possibilities acquired by combining different preprocessors are endless! Why Foliant Uses XML syntax for Preprocessor Tags It\u2019s common for Markdown-based tools to extend Markdown with custom syntax for additional functions. There\u2019s no standard for custom syntax in the Markdown spec, so every developer uses whatever syntax is available for them, different one for every new extension. In Foliant, we tried our best not to dive into this mess. Foliant aims to be an extensible platform, with many available preprocessors. So we needed one syntax for all preprocessors, but the one that was flexible enough to support them all. After trying many options, we settled with XML. Yes, normally you\u2019d have a nervous tick when you hear XML, and so would we, but this is one rare case where XML syntax belongs just right: it allows to provide tag body and named parameters it\u2019s familiar to every techwriter out there it\u2019s close enough to HTML, and HTML tags are actually allowed by the Markdown spec, so we\u2019re not even breaking the vanilla Markdown spec (almost) it\u2019s nicely highlighted in IDEs and text editors","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"In this tutorial, you\u2019ll learn how to use Foliant to build websites and pdf documents from a single Markdown source. You\u2019ll also learn how to use Foliant preprocessors.","title":"Quickstart"},{"location":"quickstart/#create-new-project","text":"All Foliant projects must adhere to a certain structure. Luckily, you don\u2019t have to memorize it thanks to Init extension. You should have installed it during Foliant installation and it\u2019s included in Foliant\u2019s default Docker image. To use it, run foliant init command: $ foliant init Enter the project name: Hello Foliant \u2714 Generating Foliant project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Hello Foliant\" created in hello-foliant To do the same with Docker, run: $ docker run --rm -it -v ` pwd ` :/usr/app/src -w /usr/app/src foliant/foliant init Enter the project name: Hello Foliant \u2714 Generating Foliant project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Hello Foliant\" created in hello-foliant Here\u2019s what this command created: $ cd hello-foliant $ tree . \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 foliant.yml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 src \u2514\u2500\u2500 index.md 1 directory, 6 files foliant.yml is your project\u2019s config file. src directory is where the content of the project lives. Currently, there\u2019s just one file index.md . requirements.txt lists the Python packages required for the project: Foliant backends and preprocessors, MkDocs themes, and what not. The the Docker image for the project is built, these requirements are installed in it. Dockerfile and docker-compose.yml are necessary to build the project in a Docker container.","title":"Create New Project"},{"location":"quickstart/#build-site","text":"In the project directory, run: $ foliant make site \u2714 Parsing config \u2714 Applying preprocessor mkdocs \u2714 Making site with MkDocs \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2018-01-23.mkdocs Or, with Docker Compose: $ docker-compose run --rm hello-foliant make site \u2714 Parsing config \u2714 Applying preprocessor mkdocs \u2714 Making site with MkDocs \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2018-01-23.mkdocs That\u2019s it! Your static, MkDocs-powered website is ready. To view it, use any web server, for example, Python\u2019s built-in one: $ cd Hello_Foliant-2018-01-23.mkdocs $ python -m http.server Serving HTTP on 0 .0.0.0 port 8000 ( http://0.0.0.0:8000/ ) ... Open localhost:8000 in your web browser. You should see something like this:","title":"Build Site"},{"location":"quickstart/#build-pdf","text":"Note To build pdfs with Pandoc, make sure you have it and TeXLive installed (see Installation ). In the project directory, run: $ foliant make pdf \u2714 Parsing config \u2714 Applying preprocessor flatten \u2714 Making pdf with Pandoc \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2018-01-23.pdf To build pdf in Docker container, first uncomment foliant/foliant:pandoc in your project\u2019s Dockerfile : - FROM foliant/foliant + # FROM foliant/foliant # If you plan to bake PDFs, uncomment this line and comment the line above: - # FROM foliant/foliant:pandoc + FROM foliant/foliant:pandoc COPY requirements.txt . RUN pip3 install -r requirements.txt Note Run docker-compose build to rebuild the image from the new base image if you have previously run docker-compose run with the old one. Also, run it whenever you need to update the versions of the required packages from requirements.txt . Then, run this command in the project directory: $ docker-compose run --rm hello-foliant make pdf \u2714 Parsing config \u2714 Applying preprocessor flatten \u2714 Making pdf with Pandoc \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2018-01-23.pdf Your standalone pdf documentation is ready! It should look something like this:","title":"Build Pdf"},{"location":"quickstart/#edit-content","text":"Your project\u2019s content lives in *.md files in src folder. You can split it between multiple files and subfolders. Foliant encourages pure Markdown syntax as described by John Gruber. Pandoc, MkDocs, and other backend-specific additions are allowed, but we strongly recommend to put them in <if></if> blocks . Create a file hello.md in src with the following content: # Hello Again This is regular text generated from regular Markdown . Foliant doesn \u2019 t force any * special * Markdown flavor . Open foliant.yml and add hello.md to chapters : title: Hello Foliant chapters: - index.md + - hello.md Rebuild the project to see the new page: $ docker-compose run --rm hello-foliant make site && docker-compose run --rm hello-foliant make pdf \u2714 Parsing config \u2714 Applying preprocessor mkdocs \u2714 Making site with MkDocs \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2018-02-08.mkdocs \u2714 Parsing config \u2714 Applying preprocessor flatten \u2714 Making pdf with Pandoc \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2018-02-08.pdf And see the new page appear on the site and in the pdf document:","title":"Edit Content"},{"location":"quickstart/#use-preprocessors","text":"Preprocessors is what makes Foliant special and extremely useful. Preprocessors are additional packages that, well, preprocess the source code of your project. You can do all kinds of stuff with preprocessors: include remote Markdown files or their parts in the source files render diagrams from textual description on build restructure the project source or compile it into a single file for a particular backend In fact, you have already used two preprocessors! Check the output of the foliant make commands and note the lines Applying preprocessor mkdocs and Applying preprocessor flatten . The first one informs you that the project source has been preprocessed with mkdocs preprocessor in order to make it compatible with MkDocs\u2019 requirements, and the second one tells you that flatten preprocessor was used to squash the project source into one a single file (because Pandoc only works with single files). These preprocessors where called by MkDocs and Pandoc backends respectively. You didn\u2019t have to install or activate them explicitly. Now, let\u2019s try to use a different kind of preprocessors, the ones that register new tags: Blockdiag .","title":"Use Preprocessors"},{"location":"quickstart/#embed-diagrams-with-blockdiag","text":"Blockdiag is a Python app for generating diagrams. Blockdiag preprocessor extracts diagram descriptions from the project source and replaces them with the generated images. In hello.md , add the following lines: Foliant doesn\u2019t force any *special* Markdown flavor. + <seqdiag caption=\"This diagram is generated on the fly\"> + seqdiag { + \"foliant make site\" -> \"mkdocs preprocessor\" -> \"blockdiag preprocessor\" -> \"mkdocs backend\" -> site; + } + </seqdiag> Blockdiag preprocessor adds several tags to Foliant, each corresponding to a certain diagram type. Sequence diagrams are defined with <seqdiag></seqdiag> tag. This is what we used in the sample above. The diagram definition sits in the tag body and the diagram properties such as caption or format are defined as tag parameters. Rebuild the site with foliant make site and open it in the browser: Rebuild the pdf as well and see that the diagram there: Let\u2019s customize the look of the diagrams in our project by setting their properties in the config file. For example, let\u2019s use a custom font for labels. I\u2019m using the ever popular Comic Sans font, but you can pick any font that\u2019s available in .ttf format. Put the font file in the project directory and add the following lines to foliant.yml : preprocessors: - - blockdiag + - blockdiag: + params: + font: !path comic.ttf After a rebuild, the diagram on the site and in the pdf should look like this: There are many more params you can define for your diagrams. You can override global params for particluar diagrams in their tags. And by combining this preprocessor with Flags you can even set different params for different backends, for example build vector diagrams for pdf output and bitmap for site: This is a diagram that is rendered to `. png ` in html and to `. pdf ` in pdf : << blockdiag format = \" <if targets= \" html \" >png</if><<if targets= \" pdf \" >pdf</if \" > ... </ blockdiag > The possibilities acquired by combining different preprocessors are endless! Why Foliant Uses XML syntax for Preprocessor Tags It\u2019s common for Markdown-based tools to extend Markdown with custom syntax for additional functions. There\u2019s no standard for custom syntax in the Markdown spec, so every developer uses whatever syntax is available for them, different one for every new extension. In Foliant, we tried our best not to dive into this mess. Foliant aims to be an extensible platform, with many available preprocessors. So we needed one syntax for all preprocessors, but the one that was flexible enough to support them all. After trying many options, we settled with XML. Yes, normally you\u2019d have a nervous tick when you hear XML, and so would we, but this is one rare case where XML syntax belongs just right: it allows to provide tag body and named parameters it\u2019s familiar to every techwriter out there it\u2019s close enough to HTML, and HTML tags are actually allowed by the Markdown spec, so we\u2019re not even breaking the vanilla Markdown spec (almost) it\u2019s nicely highlighted in IDEs and text editors","title":"Embed Diagrams with Blockdiag"},{"location":"releases/","text":"History of Releases \u00b6 Here is the single linear history of releases of Foliant and its extensions. It\u2019s also available as an RSS feed . [2019-09-26] foliantcontrib.flatten 1.0.5 \u00b6 Add the keep_sources option to keep original files in the temporary working directory after flattening. [2019-09-19] foliantcontrib.confluence 0.5.2 \u00b6 Completely rewrite restoring inline comments feature. Add restore_comments and resolve_if_changed emergency options. Allow insert raw confluence code (macros, etc) inside <raw_confluence> tag. [2019-09-19] foliantcontrib.history 1.0.8 \u00b6 Allow to ignore merge commits in from: commits mode. [2019-09-18] foliantcontrib.history 1.0.7 \u00b6 Allow to get repo names from README files. [2019-09-16] foliantcontrib.history 1.0.6 \u00b6 Fix some regex patterns. [2019-09-16] foliantcontrib.history 1.0.5 \u00b6 Allow to generate history based on tags and commits. [2019-09-13] foliantcontrib.history 1.0.4 \u00b6 Add templates for target Markdown headings and RSS items titles. [2019-09-13] foliantcontrib.history 1.0.3 \u00b6 Escape regex metacharacters in headings. [2019-09-10] foliantcontrib.epsconvert 1.0.7 \u00b6 Fix image reference detection pattern, other minor fixes. [2019-09-09] foliantcontrib.history 1.0.2 \u00b6 Do not generate common top-level heading of target Markdown content. [2019-09-06] foliantcontrib.history 1.0.1 \u00b6 Add RSS feed generation. [2019-08-28] foliantcontrib.includes 1.1.6 \u00b6 Escape regular expression metacharacters in starting and ending headings, IDs, modifiers. [2019-08-27] foliantcontrib.includes 1.1.5 \u00b6 Remove meta blocks from the included content. [2019-08-26] foliantcontrib.mkdocs 1.0.10 \u00b6 Fix pattern for heading detection. [2019-08-26] foliantcontrib.swaggerdoc 1.2.0 \u00b6 Add spec_path and spec_url parameters. All path tag parameters are now loaded relative to current file. Better logging and error reporting [2019-08-26] foliantcontrib.utils.combined_options 1.0.7 \u00b6 Add validate_exists validator. Add rel_path_convertor . [2019-08-26] foliantcontrib.customids 1.0.6 \u00b6 Allow to define custom styles for headings of each level. [2019-08-26] foliantcontrib.confluence 0.4.1 \u00b6 Fix: conflict with escape_code [2019-08-23] foliantcontrib.includes 1.1.4 \u00b6 Allow for the starting and ending headings to be 1-character long. [2019-08-23] foliantcontrib.confluence 0.4.0 \u00b6 Fix: attachments were not uploaded for nonexistent pages Change confluence api wrapper to atlassian-python-api Rename backend to confluence Better error reporting [2019-08-23] foliantcontrib.mkdocs 1.0.9 \u00b6 Allow the first heading to be located not in the beginning of a document. [2019-08-23] foliantcontrib.epsconvert 1.0.6 \u00b6 Bug fix: update current directory path before processing of Markdown file content, not after. [2019-08-22] foliantcontrib.imagemagick 1.0.2 \u00b6 Bug fix: update current directory path before processing of Markdown file content, not after. [2019-08-22] foliantcontrib.meta 1.1.0 \u00b6 Remove the sections entity. Restructure code. [2019-08-22] foliantcontrib.confluence 0.3.0 \u00b6 Fix bug with images. Add multiple modes and mode parameter. Add toc parameter to automatically insert toc. Fix: upload attachments before text update (this caused images to disappear after manually editing). [2019-08-20] foliantcontrib.meta 1.0.3 \u00b6 Add span to meta [2019-08-16] foliantcontrib.confluence 0.2.0 \u00b6 Allow to input login and/or password during build Added pandoc_path option Better logging and error catching [2019-08-16] foliantcontrib.utils.combined_options 1.0.6 \u00b6 Add check for required params. Add val_type validator to check for param types. Allow to set values in Options objects [2019-08-15] foliantcontrib.confluence 0.1.0 \u00b6 Initial release. [2019-08-14] foliantcontrib.includes 1.1.3 \u00b6 Allow to specify IDs of anchors in the from_id and to_id attributes. Support the to_end attribute. [2019-08-02] foliantcontrib.escapecode 1.0.1 \u00b6 Do not ignore diagram definitions. It should be possible to escape the tags used by diagram drawing preprocessors. If some preprocessors need to work with the content that is recognized as code, call UnescapeCode explicitly before them. [2019-08-01] foliantcontrib.replace 1.0.3 \u00b6 Fixed issue with PyYAML deprecated loader. [2019-08-01] foliantcontrib.mermaid 1.0.0 \u00b6 Initial release [2019-07-30] foliantcontrib.includes 1.1.2 \u00b6 Fix include statement regex pattern. Tags joined with | must be in non-capturing parentheses. [2019-07-30] foliant 1.0.10 \u00b6 Add escape_code config option. To use it, escapecode and unescapecode preprocessors must be installed. [2019-07-30] foliantcontrib.includes 1.1.1 \u00b6 Support escape_code config option. Require Foliant 1.0.10 and escapecode preprocessor 1.0.0. Process sethead recursively. [2019-07-29] foliantcontrib.utils.preprocessor_ext 1.0.2 \u00b6 fix output remove get_options overriding, it's now implemented similarly in core [2019-07-16] foliantcontrib.bindsympli 1.0.14 \u00b6 Add width attribute to <sympli> tag. Refactor a little. [2019-07-15] foliantcontrib.slugs 1.0.1 \u00b6 Add !version and !commit_count YAML tags. [2019-07-09] foliantcontrib.docus 0.2.0 \u00b6 More flexible chapters parsing. Lists are now not mandatory. [2019-07-09] foliantcontrib.docus 0.1.0 \u00b6 Initial release. [2019-07-05] foliantcontrib.runcommands 1.0.1 \u00b6 Capture the output of an external command and write it to STDOUT. [2019-07-01] foliantcontrib.meta 1.0.2 \u00b6 Fix: subsections title may be specified in YFM; Fix: in subsections title was being cropped out [2019-07-01] foliantcontrib.project_graph 1.0.1 \u00b6 Rename rel attributes: rel_path to path , rel_id to id Relation types now don't implicitly go to edge labels. Add label explicitly from now on. Fixed: relations to !project_path and !rel_path didn't work. [2019-07-01] foliantcontrib.meta 1.0.1 \u00b6 Fix: seeds for main sections were not processed. Add debug messages for seeds processing. [2019-06-28] foliantcontrib.project_graph 1.0.0 \u00b6 Initial release. [2019-06-28] foliantcontrib.meta 1.0.0 \u00b6 Initial release. [2019-06-28] foliantcontrib.includes 1.1.0 \u00b6 Support Foliant 1.0.9. Add processing of !path , !project_path , and !rel_path modifiers (i.e. YAML tags) in attribute values of pseudo-XML tags inside the included content. Replace the values that preceded by these modifiers with absolute paths resolved depending on current context. Allow to specify the top-level (\u201croot\u201d) directory of Foliant project that the included file belongs to, with optional project_root attribute of the <include> tag. This can be necessary to resolve the !path and the !project_path modifiers in the included content correctly. Allow to specify all necessary parameters of each include statement as attribute values of pseudo-XML tags. Keep legacy syntax for backward compatibility. Update README. [2019-06-17] foliant 1.0.9 \u00b6 Process attribute values of pseudo-XML tags as YAML. Allow single quotes for enclosing attribute values of pseudo-XML tags. Add !project_path and !rel_path YAML tags. [2019-06-14] foliantcontrib.utils.preprocessor_ext 1.0.1 \u00b6 support PyYAML 5.1 [2019-06-14] foliantcontrib.utils.combined_options 1.0.5 \u00b6 support PyYAML 5.1 [2019-06-14] foliantcontrib.templateparser 1.0.2 \u00b6 support PyYAML 5.1 [2019-06-14] foliantcontrib.bindsympli 1.0.13 \u00b6 Set 2-minutes timeout instead of default 30-seconds when launching Chromium. Use page.waitForSelector() instead of page.waitForNavigation() . Use custom sleep() function for intentional delays. [2019-06-13] foliantcontrib.badges 1.0.2 \u00b6 support params which alter badge look to be supplied in tag params [2019-06-11] foliantcontrib.badges 1.0.1 \u00b6 force img mode on pdf and docx add target parameter [2019-06-11] foliantcontrib.badges 1.0.0 \u00b6 Initial release [2019-06-10] foliantcontrib.admonitions 1.0.0 \u00b6 Initial release. [2019-05-20] foliantcontrib.graphviz 1.1.1 \u00b6 Remove src param. (Use includes instead) Allow separate tags fail. Preprocessor would issue warning and continue work. [2019-05-20] foliantcontrib.templateparser 1.0.1 \u00b6 add ext_context param for external file with context allow separate templates to fail, the preprocessor would issue warning and skip them [2019-05-20] foliantcontrib.utils.combined_options 1.0.4 \u00b6 Add path_convertor which converts string options to pathlib.PosixPath [2019-05-17] foliantcontrib.blockdiag 1.0.5 \u00b6 Attributes of pseudo-XML tags have higher priority than config file options. [2019-05-17] foliantcontrib.plantuml 1.0.6 \u00b6 Attributes of <plantuml> tag have higher priority than config file options. [2019-05-17] foliantcontrib.utils.preprocessor_ext 1.0.0 \u00b6 Initial release. [2019-05-15] foliantcontrib.utils.combined_options 1.0.3 \u00b6 add iter method to allow for param in options [2019-05-15] foliantcontrib.utils.combined_options 1.0.2 \u00b6 add '0'\\'1' to bool_convertor [2019-05-14] foliantcontrib.templateparser 1.0.0 \u00b6 Initial release [2019-04-30] foliantcontrib.bindsympli 1.0.12 \u00b6 Capture the output of the Puppeter-based script and write it to STDOUT. [2019-04-15] foliantcontrib.swaggerdoc 1.1.3 \u00b6 Fix issues with json and yaml. All spec files are now loaded with yaml loader. Change PyYAML to ruamel.yaml jinja mode is deprecated, widdershins is the default mode [2019-04-10] foliantcontrib.mkdocs 1.0.8 \u00b6 Escape control characters (double quotation marks, dollar signs, backticks) that may be used in system shell commands. [2019-04-10] foliantcontrib.pandoc 1.0.10 \u00b6 Add backticks to the set of characters that should be escaped. [2019-04-10] foliantcontrib.pandoc 1.0.9 \u00b6 Escape double quotation marks ( \" ) and dollar signs ( $ ) which may be used in PDF, docx, and TeX generation commands as parts of filenames, variable values, etc. Enclose filenames that may be used in commands into double quotes. [2019-04-05] foliantcontrib.includes 1.0.11 \u00b6 Take into account the results of work of preprocessors that may be applied before includes within a single Foliant project. Rewrite the currently processed Markdown file path with the path of corresponding file that is located inside the project source directory only if the currently processed Markdown file is located inside the temporary working directory and the included file is located outside the temporary working directory. Keep all paths unchanged in all other cases. [2019-03-27] foliantcontrib.graphviz 1.0.6 \u00b6 Added as_image option. [2019-03-21] foliantcontrib.anchors 1.0.2 \u00b6 Added preprocessor_ext for better warnings (and better code) [2019-03-21] foliantcontrib.anchors 1.0.1 \u00b6 Added 'element' option to customize anchor span element. [2019-03-21] foliantcontrib.anchors 1.0.0 \u00b6 Initial release [2019-03-21] foliantcontrib.utils.combined_options 1.0.1 \u00b6 Add boolean convertor [2019-03-14] foliantcontrib.notifier 1.0.0 \u00b6 Initial release. [2019-02-21] foliantcontrib.testrail 1.1.8 \u00b6 Hardcoded section headers processing removed. [2019-02-18] foliantcontrib.replace 1.0.2 \u00b6 Now it's possible to pass the lambda function from dictionary file. with_confirmation parameter added. [2019-02-15] foliantcontrib.csvtables 1.0.1 \u00b6 setup.py fixed. [2019-02-14] foliantcontrib.graphviz 1.0.4 \u00b6 Moved combined_options out [2019-02-14] foliantcontrib.apilinks 1.1.3 \u00b6 Moved combined_options into a submodule [2019-02-14] foliantcontrib.pgsqldoc 1.1.5 \u00b6 Move combined_options into another module [2019-02-14] foliantcontrib.utils.combined_options 1.0.0 \u00b6 Initial release. [2019-02-12] foliantcontrib.testrail 1.1.7 \u00b6 Sections exclusion fixed. [2019-02-08] foliantcontrib.testrail 1.1.6 \u00b6 Case structure output fixed if any problem occurs. [2019-02-01] foliantcontrib.testrail 1.1.5 \u00b6 Bug with test case table numbering when deleting empty objects fixed. Readme updated. [2019-01-21] foliantcontrib.apilinks 1.1.1 \u00b6 Added filename to warnings. [2019-01-10] foliantcontrib.bindsympli 1.0.11 \u00b6 Disable images downloading from design pages only, but not from login page. [2018-12-24] foliantcontrib.graphviz 1.0.2 \u00b6 Fixed external diagrams not reloading on change. Fixed external diagrams are not crashing preprocessor if the file is missing. [2018-12-20] foliantcontrib.bindsympli 1.0.10 \u00b6 Check if the design page exists and the image URL is valid. [2018-12-17] foliantcontrib.graphviz 1.0.1 \u00b6 Added 'src' tag option to load diagram source from external file. [2018-12-17] foliantcontrib.graphviz 1.0.0 \u00b6 Initial release [2018-12-13] foliantcontrib.apilinks 1.1.0 \u00b6 Prefixes are now case insensitive. Only prefixes which are defined are trimmed. New option only-defined-prefixes to ignore all prefixes which are not listed in config. Options renamed and regrouped. Breaks backward compatibility. Support of several reference pattern and properties (to catch models). Now search on API page for headers h1, h2, h3 and h4. [2018-12-06] foliantcontrib.subset 1.0.8 \u00b6 Remove forgotten unnecessary import. [2018-12-06] foliantcontrib.subset 1.0.7 \u00b6 Move the imports of the oyaml module directly into the methods that use it. [2018-12-06] foliantcontrib.bindsympli 1.0.9 \u00b6 Move the while loop from JavaScript code to Python code. Add the max_attempts config option. Require Foliant 1.0.8 because of using the utils.output() method. [2018-12-04] foliantcontrib.subset 1.0.6 \u00b6 Fix a bug: check if subset partial config contains chapters section correctly. Inherit the class Cli from BaseCli , not from Cliar . [2018-12-04] foliantcontrib.multiproject 1.0.9 \u00b6 Inherit the class Cli from BaseCli , not from Cliar . [2018-12-04] foliantcontrib.apilinks 1.0.5 \u00b6 Now both command and endpoint prefix are ensured to start from root (/). [2018-12-03] foliantcontrib.apilinks 1.0.4 \u00b6 Fix not catching errors from urllib. Added 'ignoring-prefix' option. Added 'endpoint-prefix' option into API->Name section. [2018-11-29] foliantcontrib.apilinks 1.0.3 \u00b6 Add require-prefix option. [2018-11-29] foliantcontrib.apilinks 1.0.2 \u00b6 Trim prefixes function. [2018-11-29] foliantcontrib.apilinks 1.0.1 \u00b6 Update docs, fix anchor error. Add all HTTP verbs to regular expression. [2018-11-27] foliantcontrib.apilinks 1.0.0 \u00b6 Initial release. [2018-11-23] foliantcontrib.templates.preprocessor 1.0.3 \u00b6 Fix packages value in setup.py of the template: use foliant.preprocessors instead of foliantcontrib.preprocessors . Require Foliant 1.0.8 in setup.py of the template. [2018-11-20] foliantcontrib.testrail 1.1.4 \u00b6 Another bug with multi-select parameter processing fixed. [2018-11-20] foliantcontrib.testrail 1.1.3 \u00b6 Jinja templates updated. Bug with multi-select parameter processing fixed. [2018-11-19] foliantcontrib.testrail 1.1.2 \u00b6 Now it's possible to use dropdown type parameters for test cases samplings. [2018-11-19] foliantcontrib.testrail 1.1.1 \u00b6 Readme updated. [2018-11-19] foliantcontrib.testrail 1.1.0 \u00b6 Removed parameters: platforms, platform_id, add_cases_without_platform, add_unpublished_cases. Added parameters: exclude_suite_ids \u2014 to exclude suites from final document by ID, exclude_section_ids \u2014 to exclude sections from final document by ID, exclude_case_ids \u2014 to exclude cases from final document by ID, add_case_id_to_std_table - to add column with case ID to the testing table, multi_param_name - name of custom TestRail multi-select parameter for cases sampling, multi_param_select - values of multi-select parameter for cases sampling, multi_param_select_type \u2014 sampling method, add_cases_without_multi_param - to add cases without any value of multi-select parameter, add_multi_param_to_case_header \u2014 to add values of multi-select parameter to the case headers, add_multi_param_to_std_table \u2014 to add column with values of multi-select parameter to the testing table, checkbox_param_name - name of custom TestRail checkbox parameter for cases sampling, checkbox_param_select_type \u2014 state of custom TestRail checkbox parameter for cases sampling, choose_priorities \u2014 selection of case priorities for cases sampling, add_priority_to_case_header - to add priority to the case header, add_priority_to_std_table \u2014 to add column with priority to the testing table. Renamed parameters: add_case_id_to_case_name -> add_case_id_to_case_header. Fixed config parsing. [2018-11-19] foliantcontrib.pgsqldoc 1.1.3 \u00b6 Add tests; refactor code Fix triggers and functions; add description to functions Fix template [2018-11-16] foliantcontrib.templates.preprocessor 1.0.2 \u00b6 Require foliantcontrib.init 1.0.7, import the output() method. Do not rewrite source Markdown file if an error occurs. [2018-11-16] foliantcontrib.multiproject 1.0.8 \u00b6 Do not rewrite source Markdown file if an error occurs in RepoLink preprocessor. [2018-11-16] foliantcontrib.macros 1.0.4 \u00b6 Do not rewrite source Markdown file if an error occurs. [2018-11-16] foliantcontrib.includes 1.0.10 \u00b6 Do not rewrite source Markdown file if an error occurs. [2018-11-16] foliantcontrib.imgcaptions 1.0.1 \u00b6 Do not rewrite source Markdown file if an error occurs. [2018-11-16] foliantcontrib.imagemagick 1.0.1 \u00b6 Do not rewrite source Markdown file if an error occurs. [2018-11-16] foliantcontrib.flags 1.0.2 \u00b6 Do not rewrite source Markdown file if an error occurs. [2018-11-16] foliantcontrib.epsconvert 1.0.5 \u00b6 Do not rewrite source Markdown file if an error occurs. [2018-11-16] foliantcontrib.customids 1.0.5 \u00b6 Do not rewrite source Markdown file if an error occurs. [2018-11-16] foliantcontrib.bindsympli 1.0.8 \u00b6 Do not rewrite source Markdown file if an error occurs. [2018-11-16] foliantcontrib.gupload 1.1.5 \u00b6 Provide compatibility with Foliant 1.0.8. [2018-11-16] foliantcontrib.slate 1.0.4 \u00b6 Provide compatibility with Foliant 1.0.8. Fix preprocessor: if error source won't be cleared. [2018-11-14] foliantcontrib.plantuml 1.0.5 \u00b6 Do not rewrite source Markdown file if an error occurs. Use output() method and Foliant 1.0.8. [2018-11-14] foliantcontrib.blockdiag 1.0.4 \u00b6 Do not rewrite source Markdown file if an error occurs. Use output() method and Foliant 1.0.8. [2018-11-14] foliantcontrib.mkdocs 1.0.7 \u00b6 Provide compatibility with Foliant 1.0.8. [2018-11-14] foliantcontrib.pandoc 1.0.8 \u00b6 Provide compatibility with Foliant 1.0.8. [2018-11-14] foliantcontrib.init 1.0.7 \u00b6 Provide compatibility with Foliant 1.0.8. [2018-11-14] foliant 1.0.8 \u00b6 Restore quiet mode. Add the output() method for using in preprocessors. [2018-11-14] foliantcontrib.pandoc 1.0.7 \u00b6 Provide compatibility with Foliant 1.0.7. [2018-11-14] foliantcontrib.mkdocs 1.0.6 \u00b6 Provide compatibility with Foliant 1.0.7. [2018-11-14] foliant 1.0.7 \u00b6 Remove spinner made with Halo. Abolish quiet mode because it is useless if extensions are allowed to write anything to STDOUT. Show full tracebacks in debug mode; write full tracebacks into logs. [2018-11-13] foliantcontrib.init 1.0.6 \u00b6 Provide compatibility with Foliant 1.0.7. [2018-11-12] foliantcontrib.multilinetables 1.2.2 \u00b6 Problem with deletion of table strings containing only spaces fixed (critical for lists in grid tables). [2018-11-09] foliantcontrib.subset 1.0.5 \u00b6 Do not use yaml alias for oyaml module to prevent possible influence of this overriding on other parts of code. [2018-11-09] foliantcontrib.plantuml 1.0.4 \u00b6 Additionally \u0441heck if diagram image is not saved. [2018-11-09] foliantcontrib.blockdiag 1.0.3 \u00b6 Do not fail the preprocessor if some diagrams contain errors. Write error messages into the log. [2018-11-08] foliantcontrib.slate 1.0.3 \u00b6 Add slate preprocessor which copies the images outside src into the slate project. [2018-11-08] foliantcontrib.testrail 1.0.7 \u00b6 Minor fixes. [2018-11-08] foliantcontrib.plantuml 1.0.3 \u00b6 Add parse_raw option. Do not fail the preprocessor if some diagrams contain errors. Write error messages into the log. [2018-11-08] foliantcontrib.testrail 1.0.6 \u00b6 Added: parameters to exclude suite and section headers from the final document. [2018-11-07] foliantcontrib.testrail 1.0.5 \u00b6 Minor fixes. [2018-11-07] foliantcontrib.testrail 1.0.4 \u00b6 Fixed: if there is only one suite in project, it's header not added to the contents. [2018-11-02] foliantcontrib.gupload 1.1.4 \u00b6 Code refactored. [2018-11-01] foliantcontrib.templates.preprocessor 1.0.1 \u00b6 Add package_data to setup.py . [2018-11-01] foliantcontrib.gupload 1.1.3 \u00b6 Logger bug fixed. [2018-10-31] foliantcontrib.swaggerdoc 1.1.2 \u00b6 Bug fixes All path parameters in config now accept either strings or !path strings [2018-10-31] foliantcontrib.swaggerdoc 1.1.1 \u00b6 Add 'additional_json_path' param for jinja mode Add support for several json_urls [2018-10-30] foliantcontrib.multilinetables 1.2.1 \u00b6 Possibility to rewrite source files added. [2018-10-30] foliantcontrib.testrail 1.0.3 \u00b6 Possibility to rewrite source file added. [2018-10-29] foliantcontrib.bindsympli 1.0.7 \u00b6 Use 60-seconds timeout instead of 30-seconds. Provide multiple attempts to open pages. [2018-10-29] foliantcontrib.testrail 1.0.2 \u00b6 Suites collecting fixed. [2018-10-29] foliantcontrib.multilinetables 1.2.0 \u00b6 Convertation th the grid format added for arbitrary cell' content (multiple paragraphs, code blocks, lists, etc.). [2018-10-24] foliantcontrib.multiproject 1.0.7 \u00b6 Allow to override the edit_uri config option of RepoLink preprocessor with the FOLIANT_REPOLINK_EDIT_URI system environment variable. [2018-10-23] foliantcontrib.multiproject 1.0.6 \u00b6 Tidy up CLI arguments. [2018-10-23] foliantcontrib.subset 1.0.4 \u00b6 Tidy up command line arguments one more time. [2018-10-23] foliantcontrib.subset 1.0.3 \u00b6 Tidy up command line arguments. [2018-10-23] foliantcontrib.subset 1.0.2 \u00b6 Fix a bug with object names. [2018-10-22] foliantcontrib.subset 1.0.1 \u00b6 Parse YAML fairly. Merge config files recursively. [2018-10-19] foliantcontrib.swaggerdoc 1.1.0 \u00b6 Change parameter names and behavior uncompatible with 1.0.0 Add conversion to md with widdershins [2018-10-11] foliantcontrib.includes 1.0.9 \u00b6 Don\u2019t crash on failed repo sync (i.e. when you\u2019re offline). [2018-10-11] foliantcontrib.mkdocs 1.0.5 \u00b6 Require MkDocs 1.0.4. [2018-10-02] foliantcontrib.replace 1.0.1 \u00b6 Strings with image links are ignored. [2018-10-01] foliantcontrib.gupload 1.1.2 \u00b6 Convert to google docs format setting added. [2018-09-25] foliantcontrib.gupload 1.1.1 \u00b6 Unification of repository name, settings section name, and command. [2018-09-25] foliantcontrib.gupload 1.1.0 \u00b6 Backend was converted to CLI extension. [2018-09-25] foliantcontrib.multilinetables 1.1.3 \u00b6 'targets' option added to the preprocessor settings. [2018-09-21] foliantcontrib.slate 1.0.2 \u00b6 Rename shards_path param to shards. It now accepts string or list. Fix no header param. [2018-09-20] foliantcontrib.slate 1.0.1 \u00b6 Remove flatten. First chapter goes to index.html.md; all the rest go into the includes. [2018-09-18] foliantcontrib.gupload 1.0.1 \u00b6 Command line authentication was added, for example for Docker use. [2018-09-14] foliantcontrib.testrail 1.0.1 \u00b6 Preprocessor folder structure fixed. [2018-09-12] foliantcontrib.bindsympli 1.0.6 \u00b6 Do not disable images downloading. Use delays when filling email and password fields. Wait for idle network connections when loading pages. [2018-08-31] foliant 1.0.6 \u00b6 CLI: If no args are provided, print help. Fix tags searching pattern in _unescape preprocessor. [2018-08-29] foliantcontrib.pgsqldoc 1.1.2 \u00b6 Queries are now ordered (not adjustable right now) Flexable filters instead of strict filtering by schema [2018-08-27] foliantcontrib.pgsqldoc 1.1.1 \u00b6 Fix scheme template (blank lines issue) Refactor queries code [2018-08-24] foliantcontrib.multilinetables 1.1.2 \u00b6 Now it's possible to break the text anywhere in multiline tables with custom tag. Fixed determination of columns number in tables with and without side lines. [2018-08-24] foliantcontrib.pgsqldoc 1.1.0 \u00b6 Docs and scheme structure is now defined by Jinja2 templates. [2018-08-22] foliantcontrib.multilinetables 1.1.1 \u00b6 Bug with regular expression fixed. 3+ code strings with || operator in a row are not perceived as a tables now. [2018-08-22] foliantcontrib.multilinetables 1.1.0 \u00b6 Code strings with || operator are not perceived as a tables now. [2018-07-31] foliantcontrib.bump 1.0.2 \u00b6 Declare semver as dependency. [2018-07-29] foliantcontrib.bump 1.0.1 \u00b6 Fix packaging with setup.py. Poetry doesn't quite do the trick \ud83d\ude14 [2018-07-28] foliantcontrib.bump 1.0.0 \u00b6 Initial release. [2018-07-24] foliantcontrib.mkdocs 1.0.4 \u00b6 Provide customizable default names for untitled nested groups of chapters. [2018-07-24] foliantcontrib.flatten 1.0.4 \u00b6 Skip empty headings of nested subsections. [2018-07-23] foliantcontrib.includes 1.0.8 \u00b6 Require at least one space after hashes in the beginning of each heading. Add inline option to the <include> tag. Fix the bug: do not ignore empty lines after headings when using sethead . Fix the bug: allow to use less than 3 characters in the heading content. Do not mark as headings the strings that contain more than 6 leading hashes. If shifted heading level is more than 6, mark the heading content as bold paragraph text, not as heading. [2018-06-08] foliantcontrib.multiproject 1.0.5 \u00b6 Provide Git submodules support. [2018-06-07] foliantcontrib.flatten 1.0.3 \u00b6 Use flattened file path in includes preprocessor call. Require includes preprocessor 1.0.7. [2018-06-06] foliantcontrib.includes 1.0.7 \u00b6 Fix paths resolving in case of recursive processing of include statements. Allow revision markers in repo aliases. [2018-06-04] foliantcontrib.includes 1.0.6 \u00b6 Fix logging in file search method. Fix top heading level calculation. [2018-06-04] foliantcontrib.multiproject 1.0.4 \u00b6 Provide compatibility with Foliant 1.0.5. Allow to use multiple config files. [2018-06-04] foliantcontrib.pandoc 1.0.6 \u00b6 Apply flatten after all preprocessors, not before them. This fixes incompatibility with foliantcontrib.includes 1.0.5. [2018-06-04] foliantcontrib.flatten 1.0.2 \u00b6 Fix incorrect includes preprocessor call. Require Foliant 1.0.5. [2018-06-04] foliantcontrib.init 1.0.5 \u00b6 Require Foliant 1.0.5 with prompt_toolkit^2.0.0. [2018-05-30] foliantcontrib.customids 1.0.4 \u00b6 Provide separate block-level HTML elements for the anchors. Allow to define custom stylesheets for these elements. [2018-05-25] foliantcontrib.includes 1.0.5 \u00b6 Use paths that are relative to the current processed Markdown file. Fix sethead behavior for headings that contains hashes ( # ). [2018-05-14] foliant 1.0.5 \u00b6 Allow to override default config file name in CLI. Allow multiline tags. Process true and false attribute values as boolean, not as integer. Add tests. Improve code style. [2018-05-10] foliantcontrib.pandoc 1.0.5 \u00b6 Add slug config option. [2018-05-08] foliantcontrib.multiproject 1.0.3 \u00b6 Fix config loading. Other small fixes. [2018-04-25] foliantcontrib.multiproject 1.0.2 \u00b6 Fix bugs with the project directory path and Git repos syncronizing. [2018-04-23] foliantcontrib.multiproject 1.0.1 \u00b6 Fix logging. [2018-04-20] foliantcontrib.bindsympli 1.0.5 \u00b6 Add logging. [2018-04-20] foliantcontrib.plantuml 1.0.2 \u00b6 Fix logging in __init__ . [2018-04-20] foliantcontrib.plantuml 1.0.1 \u00b6 Add logging. [2018-04-20] foliantcontrib.flatten 1.0.1 \u00b6 Fix incorrect includes preprocessor call. Add logging. Require Foliant 1.0.4. [2018-04-19] foliantcontrib.epsconvert 1.0.4 \u00b6 Do not use image path when computing MD5 hash. Add targets config option. Add logging. [2018-04-19] foliantcontrib.templates.preprocessor 1.0.0 \u00b6 Initial release. [2018-04-18] foliantcontrib.customids 1.0.3 \u00b6 Add targets config option. Add logging. [2018-04-14] foliantcontrib.blockdiag 1.0.2 \u00b6 Add logging. Require Foliant 1.0.4. [2018-04-14] foliantcontrib.pandoc 1.0.4 \u00b6 Add logs. Update for Foliant 1.0.4: Pass logger to spinner. Require Foliant 1.0.4. [2018-04-14] foliantcontrib.mkdocs 1.0.3 \u00b6 Add logs. Update for Foliant 1.0.4: Pass logger to spinner. Require Foliant 1.0.4. [2018-04-14] foliantcontrib.init 1.0.4 \u00b6 Replace placeholders in file and directory names. Process *.py files. User Template strings instead of format strings for safer substitutions. Update for Foliant 1.0.4: Pass logger to spinner. Require Foliant 1.0.4. [2018-04-11] foliant 1.0.4 \u00b6 Breaking change. Add logging to all stages of building a project. Config parser extensions, CLI extensions, backends, and preprocessors can now access self.logger and create child loggers with self.logger = self.logger.getChild('newbackend') . Add pre backend with pre target that applies the preprocessors from the config and returns a Foliant project that doesn't require any preprocessing. make now returns its result, which makes is easier to call it from extensions. [2018-04-10] foliantcontrib.bindsympli 1.0.4 \u00b6 Describe the preprocessor usage in README.md . [2018-04-10] foliantcontrib.bindsympli 1.0.3 \u00b6 Eliminate external Perl scripts, rewrite the preprocessor code in Python. [2018-04-02] foliant 1.0.3 \u00b6 Fix critical issue when config parsing would fail if any config value contained non-latin characters. [2018-04-01] foliantcontrib.includes 1.0.4 \u00b6 Fix the pattern for headings detection. [2018-03-31] foliantcontrib.includes 1.0.3 \u00b6 Allow hashes ( # characters) in the content of headings. [2018-03-29] foliantcontrib.epsconvert 1.0.3 \u00b6 Take into account the content of image file when computing MD5 hash. [2018-03-29] foliantcontrib.epsconvert 1.0.2 \u00b6 Add support of any local paths. Add image cache. Remove mogrify_path and diagrams_cache_dir options, add convert_path and cache_dir instead. [2018-03-28] foliantcontrib.customids 1.0.2 \u00b6 Process first heading and all other headings separately. [2018-03-27] foliantcontrib.customids 1.0.1 \u00b6 Update README.md and docstrings. Update long description content type in setup.py [2018-03-27] foliantcontrib.bindsympli 1.0.2 \u00b6 Change the path for non-Python scripts once more. [2018-03-27] foliantcontrib.bindsympli 1.0.1 \u00b6 Change the path for non-Python scripts. [2018-03-21] foliantcontrib.includes 1.0.2 \u00b6 Fix inappropriate translation of image URLs into local paths. [2018-03-21] foliantcontrib.mkdocs 1.0.2 \u00b6 Add use_headings and slug options for MkDocs backend. Fix inappropriate translation of image URLs into local paths in MkDocs preprocessor. [2018-03-17] foliant 1.0.2 \u00b6 Use README.md as package description. [2018-03-13] foliantcontrib.epsconvert 1.0.1 \u00b6 Add diagrams_cache_dir option support. [2018-02-28] foliantcontrib.pandoc 1.0.3 \u00b6 Change Pandoc command line parameter --reference-docx to --reference-doc . [2018-02-25] foliant 1.0.1 \u00b6 Fix critical bug with CLI module caused by missing version definition in the root __init__.py file. [2018-02-23] foliant 1.0.0 \u00b6 Complete rewrite. [2018-02-16] foliantcontrib.blockdiag 1.0.1 \u00b6 Add pdf output format support. [2018-02-07] foliantcontrib.init 1.0.3 \u00b6 Upon creation, relative path to the created project directory is returned instead of an absolute one. Templates: basic: Foliant docs related content removed from README.md. Templates: basic: foliantcontrib.mkdocs added to requirements.txt. [2018-02-07] foliantcontrib.init 1.0.2 \u00b6 Add slug placeholder. Process placeholders in .yml , .txt , and .md files, not just foliant.yml . Templates: basic: Add Dockerfile , docker-compose.yml , requirements.txt , and README.md . [2018-02-07] foliantcontrib.init 1.0.1 \u00b6 Fix issue with init command missing after installation. Fix issue with missing templates after installation. [2018-02-01] foliantcontrib.macros 1.0.3 \u00b6 Add tag <m>...</m> . [2018-01-17] foliantcontrib.macros 1.0.2 \u00b6 Switch from unnamed to named parameters. Macro name is now defined in the tag body instead of \"name\" option. [2018-01-15] foliantcontrib.macros 1.0.1 \u00b6 Preserve param case. [2018-01-06] foliantcontrib.flags 1.0.1 \u00b6 Add targets and backends options to <if> tag. [2018-01-05] foliantcontrib.pandoc 1.0.2 \u00b6 Change default Markdown flavor from markdown_strict to markdown . [2017-12-17] foliantcontrib.pandoc 1.0.1 \u00b6 Add tex target. [2017-12-16] foliantcontrib.mkdocs 1.0.1 \u00b6 Add ghp target for GitHub Pages deploy with mkdocs gh-deploy . [2017-12-15] foliantcontrib.includes 1.0.1 \u00b6 Fix git repo name detection when the repo part contains full stops.","title":"History of Releases"},{"location":"releases/#history-of-releases","text":"Here is the single linear history of releases of Foliant and its extensions. It\u2019s also available as an RSS feed .","title":"History of Releases"},{"location":"releases/#2019-09-26-foliantcontribflatten-105","text":"Add the keep_sources option to keep original files in the temporary working directory after flattening.","title":"[2019-09-26] foliantcontrib.flatten 1.0.5"},{"location":"releases/#2019-09-19-foliantcontribconfluence-052","text":"Completely rewrite restoring inline comments feature. Add restore_comments and resolve_if_changed emergency options. Allow insert raw confluence code (macros, etc) inside <raw_confluence> tag.","title":"[2019-09-19] foliantcontrib.confluence 0.5.2"},{"location":"releases/#2019-09-19-foliantcontribhistory-108","text":"Allow to ignore merge commits in from: commits mode.","title":"[2019-09-19] foliantcontrib.history 1.0.8"},{"location":"releases/#2019-09-18-foliantcontribhistory-107","text":"Allow to get repo names from README files.","title":"[2019-09-18] foliantcontrib.history 1.0.7"},{"location":"releases/#2019-09-16-foliantcontribhistory-106","text":"Fix some regex patterns.","title":"[2019-09-16] foliantcontrib.history 1.0.6"},{"location":"releases/#2019-09-16-foliantcontribhistory-105","text":"Allow to generate history based on tags and commits.","title":"[2019-09-16] foliantcontrib.history 1.0.5"},{"location":"releases/#2019-09-13-foliantcontribhistory-104","text":"Add templates for target Markdown headings and RSS items titles.","title":"[2019-09-13] foliantcontrib.history 1.0.4"},{"location":"releases/#2019-09-13-foliantcontribhistory-103","text":"Escape regex metacharacters in headings.","title":"[2019-09-13] foliantcontrib.history 1.0.3"},{"location":"releases/#2019-09-10-foliantcontribepsconvert-107","text":"Fix image reference detection pattern, other minor fixes.","title":"[2019-09-10] foliantcontrib.epsconvert 1.0.7"},{"location":"releases/#2019-09-09-foliantcontribhistory-102","text":"Do not generate common top-level heading of target Markdown content.","title":"[2019-09-09] foliantcontrib.history 1.0.2"},{"location":"releases/#2019-09-06-foliantcontribhistory-101","text":"Add RSS feed generation.","title":"[2019-09-06] foliantcontrib.history 1.0.1"},{"location":"releases/#2019-08-28-foliantcontribincludes-116","text":"Escape regular expression metacharacters in starting and ending headings, IDs, modifiers.","title":"[2019-08-28] foliantcontrib.includes 1.1.6"},{"location":"releases/#2019-08-27-foliantcontribincludes-115","text":"Remove meta blocks from the included content.","title":"[2019-08-27] foliantcontrib.includes 1.1.5"},{"location":"releases/#2019-08-26-foliantcontribmkdocs-1010","text":"Fix pattern for heading detection.","title":"[2019-08-26] foliantcontrib.mkdocs 1.0.10"},{"location":"releases/#2019-08-26-foliantcontribswaggerdoc-120","text":"Add spec_path and spec_url parameters. All path tag parameters are now loaded relative to current file. Better logging and error reporting","title":"[2019-08-26] foliantcontrib.swaggerdoc 1.2.0"},{"location":"releases/#2019-08-26-foliantcontributilscombined_options-107","text":"Add validate_exists validator. Add rel_path_convertor .","title":"[2019-08-26] foliantcontrib.utils.combined_options 1.0.7"},{"location":"releases/#2019-08-26-foliantcontribcustomids-106","text":"Allow to define custom styles for headings of each level.","title":"[2019-08-26] foliantcontrib.customids 1.0.6"},{"location":"releases/#2019-08-26-foliantcontribconfluence-041","text":"Fix: conflict with escape_code","title":"[2019-08-26] foliantcontrib.confluence 0.4.1"},{"location":"releases/#2019-08-23-foliantcontribincludes-114","text":"Allow for the starting and ending headings to be 1-character long.","title":"[2019-08-23] foliantcontrib.includes 1.1.4"},{"location":"releases/#2019-08-23-foliantcontribconfluence-040","text":"Fix: attachments were not uploaded for nonexistent pages Change confluence api wrapper to atlassian-python-api Rename backend to confluence Better error reporting","title":"[2019-08-23] foliantcontrib.confluence 0.4.0"},{"location":"releases/#2019-08-23-foliantcontribmkdocs-109","text":"Allow the first heading to be located not in the beginning of a document.","title":"[2019-08-23] foliantcontrib.mkdocs 1.0.9"},{"location":"releases/#2019-08-23-foliantcontribepsconvert-106","text":"Bug fix: update current directory path before processing of Markdown file content, not after.","title":"[2019-08-23] foliantcontrib.epsconvert 1.0.6"},{"location":"releases/#2019-08-22-foliantcontribimagemagick-102","text":"Bug fix: update current directory path before processing of Markdown file content, not after.","title":"[2019-08-22] foliantcontrib.imagemagick 1.0.2"},{"location":"releases/#2019-08-22-foliantcontribmeta-110","text":"Remove the sections entity. Restructure code.","title":"[2019-08-22] foliantcontrib.meta 1.1.0"},{"location":"releases/#2019-08-22-foliantcontribconfluence-030","text":"Fix bug with images. Add multiple modes and mode parameter. Add toc parameter to automatically insert toc. Fix: upload attachments before text update (this caused images to disappear after manually editing).","title":"[2019-08-22] foliantcontrib.confluence 0.3.0"},{"location":"releases/#2019-08-20-foliantcontribmeta-103","text":"Add span to meta","title":"[2019-08-20] foliantcontrib.meta 1.0.3"},{"location":"releases/#2019-08-16-foliantcontribconfluence-020","text":"Allow to input login and/or password during build Added pandoc_path option Better logging and error catching","title":"[2019-08-16] foliantcontrib.confluence 0.2.0"},{"location":"releases/#2019-08-16-foliantcontributilscombined_options-106","text":"Add check for required params. Add val_type validator to check for param types. Allow to set values in Options objects","title":"[2019-08-16] foliantcontrib.utils.combined_options 1.0.6"},{"location":"releases/#2019-08-15-foliantcontribconfluence-010","text":"Initial release.","title":"[2019-08-15] foliantcontrib.confluence 0.1.0"},{"location":"releases/#2019-08-14-foliantcontribincludes-113","text":"Allow to specify IDs of anchors in the from_id and to_id attributes. Support the to_end attribute.","title":"[2019-08-14] foliantcontrib.includes 1.1.3"},{"location":"releases/#2019-08-02-foliantcontribescapecode-101","text":"Do not ignore diagram definitions. It should be possible to escape the tags used by diagram drawing preprocessors. If some preprocessors need to work with the content that is recognized as code, call UnescapeCode explicitly before them.","title":"[2019-08-02] foliantcontrib.escapecode 1.0.1"},{"location":"releases/#2019-08-01-foliantcontribreplace-103","text":"Fixed issue with PyYAML deprecated loader.","title":"[2019-08-01] foliantcontrib.replace 1.0.3"},{"location":"releases/#2019-08-01-foliantcontribmermaid-100","text":"Initial release","title":"[2019-08-01] foliantcontrib.mermaid 1.0.0"},{"location":"releases/#2019-07-30-foliantcontribincludes-112","text":"Fix include statement regex pattern. Tags joined with | must be in non-capturing parentheses.","title":"[2019-07-30] foliantcontrib.includes 1.1.2"},{"location":"releases/#2019-07-30-foliant-1010","text":"Add escape_code config option. To use it, escapecode and unescapecode preprocessors must be installed.","title":"[2019-07-30] foliant 1.0.10"},{"location":"releases/#2019-07-30-foliantcontribincludes-111","text":"Support escape_code config option. Require Foliant 1.0.10 and escapecode preprocessor 1.0.0. Process sethead recursively.","title":"[2019-07-30] foliantcontrib.includes 1.1.1"},{"location":"releases/#2019-07-29-foliantcontributilspreprocessor_ext-102","text":"fix output remove get_options overriding, it's now implemented similarly in core","title":"[2019-07-29] foliantcontrib.utils.preprocessor_ext 1.0.2"},{"location":"releases/#2019-07-16-foliantcontribbindsympli-1014","text":"Add width attribute to <sympli> tag. Refactor a little.","title":"[2019-07-16] foliantcontrib.bindsympli 1.0.14"},{"location":"releases/#2019-07-15-foliantcontribslugs-101","text":"Add !version and !commit_count YAML tags.","title":"[2019-07-15] foliantcontrib.slugs 1.0.1"},{"location":"releases/#2019-07-09-foliantcontribdocus-020","text":"More flexible chapters parsing. Lists are now not mandatory.","title":"[2019-07-09] foliantcontrib.docus 0.2.0"},{"location":"releases/#2019-07-09-foliantcontribdocus-010","text":"Initial release.","title":"[2019-07-09] foliantcontrib.docus 0.1.0"},{"location":"releases/#2019-07-05-foliantcontribruncommands-101","text":"Capture the output of an external command and write it to STDOUT.","title":"[2019-07-05] foliantcontrib.runcommands 1.0.1"},{"location":"releases/#2019-07-01-foliantcontribmeta-102","text":"Fix: subsections title may be specified in YFM; Fix: in subsections title was being cropped out","title":"[2019-07-01] foliantcontrib.meta 1.0.2"},{"location":"releases/#2019-07-01-foliantcontribproject_graph-101","text":"Rename rel attributes: rel_path to path , rel_id to id Relation types now don't implicitly go to edge labels. Add label explicitly from now on. Fixed: relations to !project_path and !rel_path didn't work.","title":"[2019-07-01] foliantcontrib.project_graph 1.0.1"},{"location":"releases/#2019-07-01-foliantcontribmeta-101","text":"Fix: seeds for main sections were not processed. Add debug messages for seeds processing.","title":"[2019-07-01] foliantcontrib.meta 1.0.1"},{"location":"releases/#2019-06-28-foliantcontribproject_graph-100","text":"Initial release.","title":"[2019-06-28] foliantcontrib.project_graph 1.0.0"},{"location":"releases/#2019-06-28-foliantcontribmeta-100","text":"Initial release.","title":"[2019-06-28] foliantcontrib.meta 1.0.0"},{"location":"releases/#2019-06-28-foliantcontribincludes-110","text":"Support Foliant 1.0.9. Add processing of !path , !project_path , and !rel_path modifiers (i.e. YAML tags) in attribute values of pseudo-XML tags inside the included content. Replace the values that preceded by these modifiers with absolute paths resolved depending on current context. Allow to specify the top-level (\u201croot\u201d) directory of Foliant project that the included file belongs to, with optional project_root attribute of the <include> tag. This can be necessary to resolve the !path and the !project_path modifiers in the included content correctly. Allow to specify all necessary parameters of each include statement as attribute values of pseudo-XML tags. Keep legacy syntax for backward compatibility. Update README.","title":"[2019-06-28] foliantcontrib.includes 1.1.0"},{"location":"releases/#2019-06-17-foliant-109","text":"Process attribute values of pseudo-XML tags as YAML. Allow single quotes for enclosing attribute values of pseudo-XML tags. Add !project_path and !rel_path YAML tags.","title":"[2019-06-17] foliant 1.0.9"},{"location":"releases/#2019-06-14-foliantcontributilspreprocessor_ext-101","text":"support PyYAML 5.1","title":"[2019-06-14] foliantcontrib.utils.preprocessor_ext 1.0.1"},{"location":"releases/#2019-06-14-foliantcontributilscombined_options-105","text":"support PyYAML 5.1","title":"[2019-06-14] foliantcontrib.utils.combined_options 1.0.5"},{"location":"releases/#2019-06-14-foliantcontribtemplateparser-102","text":"support PyYAML 5.1","title":"[2019-06-14] foliantcontrib.templateparser 1.0.2"},{"location":"releases/#2019-06-14-foliantcontribbindsympli-1013","text":"Set 2-minutes timeout instead of default 30-seconds when launching Chromium. Use page.waitForSelector() instead of page.waitForNavigation() . Use custom sleep() function for intentional delays.","title":"[2019-06-14] foliantcontrib.bindsympli 1.0.13"},{"location":"releases/#2019-06-13-foliantcontribbadges-102","text":"support params which alter badge look to be supplied in tag params","title":"[2019-06-13] foliantcontrib.badges 1.0.2"},{"location":"releases/#2019-06-11-foliantcontribbadges-101","text":"force img mode on pdf and docx add target parameter","title":"[2019-06-11] foliantcontrib.badges 1.0.1"},{"location":"releases/#2019-06-11-foliantcontribbadges-100","text":"Initial release","title":"[2019-06-11] foliantcontrib.badges 1.0.0"},{"location":"releases/#2019-06-10-foliantcontribadmonitions-100","text":"Initial release.","title":"[2019-06-10] foliantcontrib.admonitions 1.0.0"},{"location":"releases/#2019-05-20-foliantcontribgraphviz-111","text":"Remove src param. (Use includes instead) Allow separate tags fail. Preprocessor would issue warning and continue work.","title":"[2019-05-20] foliantcontrib.graphviz 1.1.1"},{"location":"releases/#2019-05-20-foliantcontribtemplateparser-101","text":"add ext_context param for external file with context allow separate templates to fail, the preprocessor would issue warning and skip them","title":"[2019-05-20] foliantcontrib.templateparser 1.0.1"},{"location":"releases/#2019-05-20-foliantcontributilscombined_options-104","text":"Add path_convertor which converts string options to pathlib.PosixPath","title":"[2019-05-20] foliantcontrib.utils.combined_options 1.0.4"},{"location":"releases/#2019-05-17-foliantcontribblockdiag-105","text":"Attributes of pseudo-XML tags have higher priority than config file options.","title":"[2019-05-17] foliantcontrib.blockdiag 1.0.5"},{"location":"releases/#2019-05-17-foliantcontribplantuml-106","text":"Attributes of <plantuml> tag have higher priority than config file options.","title":"[2019-05-17] foliantcontrib.plantuml 1.0.6"},{"location":"releases/#2019-05-17-foliantcontributilspreprocessor_ext-100","text":"Initial release.","title":"[2019-05-17] foliantcontrib.utils.preprocessor_ext 1.0.0"},{"location":"releases/#2019-05-15-foliantcontributilscombined_options-103","text":"add iter method to allow for param in options","title":"[2019-05-15] foliantcontrib.utils.combined_options 1.0.3"},{"location":"releases/#2019-05-15-foliantcontributilscombined_options-102","text":"add '0'\\'1' to bool_convertor","title":"[2019-05-15] foliantcontrib.utils.combined_options 1.0.2"},{"location":"releases/#2019-05-14-foliantcontribtemplateparser-100","text":"Initial release","title":"[2019-05-14] foliantcontrib.templateparser 1.0.0"},{"location":"releases/#2019-04-30-foliantcontribbindsympli-1012","text":"Capture the output of the Puppeter-based script and write it to STDOUT.","title":"[2019-04-30] foliantcontrib.bindsympli 1.0.12"},{"location":"releases/#2019-04-15-foliantcontribswaggerdoc-113","text":"Fix issues with json and yaml. All spec files are now loaded with yaml loader. Change PyYAML to ruamel.yaml jinja mode is deprecated, widdershins is the default mode","title":"[2019-04-15] foliantcontrib.swaggerdoc 1.1.3"},{"location":"releases/#2019-04-10-foliantcontribmkdocs-108","text":"Escape control characters (double quotation marks, dollar signs, backticks) that may be used in system shell commands.","title":"[2019-04-10] foliantcontrib.mkdocs 1.0.8"},{"location":"releases/#2019-04-10-foliantcontribpandoc-1010","text":"Add backticks to the set of characters that should be escaped.","title":"[2019-04-10] foliantcontrib.pandoc 1.0.10"},{"location":"releases/#2019-04-10-foliantcontribpandoc-109","text":"Escape double quotation marks ( \" ) and dollar signs ( $ ) which may be used in PDF, docx, and TeX generation commands as parts of filenames, variable values, etc. Enclose filenames that may be used in commands into double quotes.","title":"[2019-04-10] foliantcontrib.pandoc 1.0.9"},{"location":"releases/#2019-04-05-foliantcontribincludes-1011","text":"Take into account the results of work of preprocessors that may be applied before includes within a single Foliant project. Rewrite the currently processed Markdown file path with the path of corresponding file that is located inside the project source directory only if the currently processed Markdown file is located inside the temporary working directory and the included file is located outside the temporary working directory. Keep all paths unchanged in all other cases.","title":"[2019-04-05] foliantcontrib.includes 1.0.11"},{"location":"releases/#2019-03-27-foliantcontribgraphviz-106","text":"Added as_image option.","title":"[2019-03-27] foliantcontrib.graphviz 1.0.6"},{"location":"releases/#2019-03-21-foliantcontribanchors-102","text":"Added preprocessor_ext for better warnings (and better code)","title":"[2019-03-21] foliantcontrib.anchors 1.0.2"},{"location":"releases/#2019-03-21-foliantcontribanchors-101","text":"Added 'element' option to customize anchor span element.","title":"[2019-03-21] foliantcontrib.anchors 1.0.1"},{"location":"releases/#2019-03-21-foliantcontribanchors-100","text":"Initial release","title":"[2019-03-21] foliantcontrib.anchors 1.0.0"},{"location":"releases/#2019-03-21-foliantcontributilscombined_options-101","text":"Add boolean convertor","title":"[2019-03-21] foliantcontrib.utils.combined_options 1.0.1"},{"location":"releases/#2019-03-14-foliantcontribnotifier-100","text":"Initial release.","title":"[2019-03-14] foliantcontrib.notifier 1.0.0"},{"location":"releases/#2019-02-21-foliantcontribtestrail-118","text":"Hardcoded section headers processing removed.","title":"[2019-02-21] foliantcontrib.testrail 1.1.8"},{"location":"releases/#2019-02-18-foliantcontribreplace-102","text":"Now it's possible to pass the lambda function from dictionary file. with_confirmation parameter added.","title":"[2019-02-18] foliantcontrib.replace 1.0.2"},{"location":"releases/#2019-02-15-foliantcontribcsvtables-101","text":"setup.py fixed.","title":"[2019-02-15] foliantcontrib.csvtables 1.0.1"},{"location":"releases/#2019-02-14-foliantcontribgraphviz-104","text":"Moved combined_options out","title":"[2019-02-14] foliantcontrib.graphviz 1.0.4"},{"location":"releases/#2019-02-14-foliantcontribapilinks-113","text":"Moved combined_options into a submodule","title":"[2019-02-14] foliantcontrib.apilinks 1.1.3"},{"location":"releases/#2019-02-14-foliantcontribpgsqldoc-115","text":"Move combined_options into another module","title":"[2019-02-14] foliantcontrib.pgsqldoc 1.1.5"},{"location":"releases/#2019-02-14-foliantcontributilscombined_options-100","text":"Initial release.","title":"[2019-02-14] foliantcontrib.utils.combined_options 1.0.0"},{"location":"releases/#2019-02-12-foliantcontribtestrail-117","text":"Sections exclusion fixed.","title":"[2019-02-12] foliantcontrib.testrail 1.1.7"},{"location":"releases/#2019-02-08-foliantcontribtestrail-116","text":"Case structure output fixed if any problem occurs.","title":"[2019-02-08] foliantcontrib.testrail 1.1.6"},{"location":"releases/#2019-02-01-foliantcontribtestrail-115","text":"Bug with test case table numbering when deleting empty objects fixed. Readme updated.","title":"[2019-02-01] foliantcontrib.testrail 1.1.5"},{"location":"releases/#2019-01-21-foliantcontribapilinks-111","text":"Added filename to warnings.","title":"[2019-01-21] foliantcontrib.apilinks 1.1.1"},{"location":"releases/#2019-01-10-foliantcontribbindsympli-1011","text":"Disable images downloading from design pages only, but not from login page.","title":"[2019-01-10] foliantcontrib.bindsympli 1.0.11"},{"location":"releases/#2018-12-24-foliantcontribgraphviz-102","text":"Fixed external diagrams not reloading on change. Fixed external diagrams are not crashing preprocessor if the file is missing.","title":"[2018-12-24] foliantcontrib.graphviz 1.0.2"},{"location":"releases/#2018-12-20-foliantcontribbindsympli-1010","text":"Check if the design page exists and the image URL is valid.","title":"[2018-12-20] foliantcontrib.bindsympli 1.0.10"},{"location":"releases/#2018-12-17-foliantcontribgraphviz-101","text":"Added 'src' tag option to load diagram source from external file.","title":"[2018-12-17] foliantcontrib.graphviz 1.0.1"},{"location":"releases/#2018-12-17-foliantcontribgraphviz-100","text":"Initial release","title":"[2018-12-17] foliantcontrib.graphviz 1.0.0"},{"location":"releases/#2018-12-13-foliantcontribapilinks-110","text":"Prefixes are now case insensitive. Only prefixes which are defined are trimmed. New option only-defined-prefixes to ignore all prefixes which are not listed in config. Options renamed and regrouped. Breaks backward compatibility. Support of several reference pattern and properties (to catch models). Now search on API page for headers h1, h2, h3 and h4.","title":"[2018-12-13] foliantcontrib.apilinks 1.1.0"},{"location":"releases/#2018-12-06-foliantcontribsubset-108","text":"Remove forgotten unnecessary import.","title":"[2018-12-06] foliantcontrib.subset 1.0.8"},{"location":"releases/#2018-12-06-foliantcontribsubset-107","text":"Move the imports of the oyaml module directly into the methods that use it.","title":"[2018-12-06] foliantcontrib.subset 1.0.7"},{"location":"releases/#2018-12-06-foliantcontribbindsympli-109","text":"Move the while loop from JavaScript code to Python code. Add the max_attempts config option. Require Foliant 1.0.8 because of using the utils.output() method.","title":"[2018-12-06] foliantcontrib.bindsympli 1.0.9"},{"location":"releases/#2018-12-04-foliantcontribsubset-106","text":"Fix a bug: check if subset partial config contains chapters section correctly. Inherit the class Cli from BaseCli , not from Cliar .","title":"[2018-12-04] foliantcontrib.subset 1.0.6"},{"location":"releases/#2018-12-04-foliantcontribmultiproject-109","text":"Inherit the class Cli from BaseCli , not from Cliar .","title":"[2018-12-04] foliantcontrib.multiproject 1.0.9"},{"location":"releases/#2018-12-04-foliantcontribapilinks-105","text":"Now both command and endpoint prefix are ensured to start from root (/).","title":"[2018-12-04] foliantcontrib.apilinks 1.0.5"},{"location":"releases/#2018-12-03-foliantcontribapilinks-104","text":"Fix not catching errors from urllib. Added 'ignoring-prefix' option. Added 'endpoint-prefix' option into API->Name section.","title":"[2018-12-03] foliantcontrib.apilinks 1.0.4"},{"location":"releases/#2018-11-29-foliantcontribapilinks-103","text":"Add require-prefix option.","title":"[2018-11-29] foliantcontrib.apilinks 1.0.3"},{"location":"releases/#2018-11-29-foliantcontribapilinks-102","text":"Trim prefixes function.","title":"[2018-11-29] foliantcontrib.apilinks 1.0.2"},{"location":"releases/#2018-11-29-foliantcontribapilinks-101","text":"Update docs, fix anchor error. Add all HTTP verbs to regular expression.","title":"[2018-11-29] foliantcontrib.apilinks 1.0.1"},{"location":"releases/#2018-11-27-foliantcontribapilinks-100","text":"Initial release.","title":"[2018-11-27] foliantcontrib.apilinks 1.0.0"},{"location":"releases/#2018-11-23-foliantcontribtemplatespreprocessor-103","text":"Fix packages value in setup.py of the template: use foliant.preprocessors instead of foliantcontrib.preprocessors . Require Foliant 1.0.8 in setup.py of the template.","title":"[2018-11-23] foliantcontrib.templates.preprocessor 1.0.3"},{"location":"releases/#2018-11-20-foliantcontribtestrail-114","text":"Another bug with multi-select parameter processing fixed.","title":"[2018-11-20] foliantcontrib.testrail 1.1.4"},{"location":"releases/#2018-11-20-foliantcontribtestrail-113","text":"Jinja templates updated. Bug with multi-select parameter processing fixed.","title":"[2018-11-20] foliantcontrib.testrail 1.1.3"},{"location":"releases/#2018-11-19-foliantcontribtestrail-112","text":"Now it's possible to use dropdown type parameters for test cases samplings.","title":"[2018-11-19] foliantcontrib.testrail 1.1.2"},{"location":"releases/#2018-11-19-foliantcontribtestrail-111","text":"Readme updated.","title":"[2018-11-19] foliantcontrib.testrail 1.1.1"},{"location":"releases/#2018-11-19-foliantcontribtestrail-110","text":"Removed parameters: platforms, platform_id, add_cases_without_platform, add_unpublished_cases. Added parameters: exclude_suite_ids \u2014 to exclude suites from final document by ID, exclude_section_ids \u2014 to exclude sections from final document by ID, exclude_case_ids \u2014 to exclude cases from final document by ID, add_case_id_to_std_table - to add column with case ID to the testing table, multi_param_name - name of custom TestRail multi-select parameter for cases sampling, multi_param_select - values of multi-select parameter for cases sampling, multi_param_select_type \u2014 sampling method, add_cases_without_multi_param - to add cases without any value of multi-select parameter, add_multi_param_to_case_header \u2014 to add values of multi-select parameter to the case headers, add_multi_param_to_std_table \u2014 to add column with values of multi-select parameter to the testing table, checkbox_param_name - name of custom TestRail checkbox parameter for cases sampling, checkbox_param_select_type \u2014 state of custom TestRail checkbox parameter for cases sampling, choose_priorities \u2014 selection of case priorities for cases sampling, add_priority_to_case_header - to add priority to the case header, add_priority_to_std_table \u2014 to add column with priority to the testing table. Renamed parameters: add_case_id_to_case_name -> add_case_id_to_case_header. Fixed config parsing.","title":"[2018-11-19] foliantcontrib.testrail 1.1.0"},{"location":"releases/#2018-11-19-foliantcontribpgsqldoc-113","text":"Add tests; refactor code Fix triggers and functions; add description to functions Fix template","title":"[2018-11-19] foliantcontrib.pgsqldoc 1.1.3"},{"location":"releases/#2018-11-16-foliantcontribtemplatespreprocessor-102","text":"Require foliantcontrib.init 1.0.7, import the output() method. Do not rewrite source Markdown file if an error occurs.","title":"[2018-11-16] foliantcontrib.templates.preprocessor 1.0.2"},{"location":"releases/#2018-11-16-foliantcontribmultiproject-108","text":"Do not rewrite source Markdown file if an error occurs in RepoLink preprocessor.","title":"[2018-11-16] foliantcontrib.multiproject 1.0.8"},{"location":"releases/#2018-11-16-foliantcontribmacros-104","text":"Do not rewrite source Markdown file if an error occurs.","title":"[2018-11-16] foliantcontrib.macros 1.0.4"},{"location":"releases/#2018-11-16-foliantcontribincludes-1010","text":"Do not rewrite source Markdown file if an error occurs.","title":"[2018-11-16] foliantcontrib.includes 1.0.10"},{"location":"releases/#2018-11-16-foliantcontribimgcaptions-101","text":"Do not rewrite source Markdown file if an error occurs.","title":"[2018-11-16] foliantcontrib.imgcaptions 1.0.1"},{"location":"releases/#2018-11-16-foliantcontribimagemagick-101","text":"Do not rewrite source Markdown file if an error occurs.","title":"[2018-11-16] foliantcontrib.imagemagick 1.0.1"},{"location":"releases/#2018-11-16-foliantcontribflags-102","text":"Do not rewrite source Markdown file if an error occurs.","title":"[2018-11-16] foliantcontrib.flags 1.0.2"},{"location":"releases/#2018-11-16-foliantcontribepsconvert-105","text":"Do not rewrite source Markdown file if an error occurs.","title":"[2018-11-16] foliantcontrib.epsconvert 1.0.5"},{"location":"releases/#2018-11-16-foliantcontribcustomids-105","text":"Do not rewrite source Markdown file if an error occurs.","title":"[2018-11-16] foliantcontrib.customids 1.0.5"},{"location":"releases/#2018-11-16-foliantcontribbindsympli-108","text":"Do not rewrite source Markdown file if an error occurs.","title":"[2018-11-16] foliantcontrib.bindsympli 1.0.8"},{"location":"releases/#2018-11-16-foliantcontribgupload-115","text":"Provide compatibility with Foliant 1.0.8.","title":"[2018-11-16] foliantcontrib.gupload 1.1.5"},{"location":"releases/#2018-11-16-foliantcontribslate-104","text":"Provide compatibility with Foliant 1.0.8. Fix preprocessor: if error source won't be cleared.","title":"[2018-11-16] foliantcontrib.slate 1.0.4"},{"location":"releases/#2018-11-14-foliantcontribplantuml-105","text":"Do not rewrite source Markdown file if an error occurs. Use output() method and Foliant 1.0.8.","title":"[2018-11-14] foliantcontrib.plantuml 1.0.5"},{"location":"releases/#2018-11-14-foliantcontribblockdiag-104","text":"Do not rewrite source Markdown file if an error occurs. Use output() method and Foliant 1.0.8.","title":"[2018-11-14] foliantcontrib.blockdiag 1.0.4"},{"location":"releases/#2018-11-14-foliantcontribmkdocs-107","text":"Provide compatibility with Foliant 1.0.8.","title":"[2018-11-14] foliantcontrib.mkdocs 1.0.7"},{"location":"releases/#2018-11-14-foliantcontribpandoc-108","text":"Provide compatibility with Foliant 1.0.8.","title":"[2018-11-14] foliantcontrib.pandoc 1.0.8"},{"location":"releases/#2018-11-14-foliantcontribinit-107","text":"Provide compatibility with Foliant 1.0.8.","title":"[2018-11-14] foliantcontrib.init 1.0.7"},{"location":"releases/#2018-11-14-foliant-108","text":"Restore quiet mode. Add the output() method for using in preprocessors.","title":"[2018-11-14] foliant 1.0.8"},{"location":"releases/#2018-11-14-foliantcontribpandoc-107","text":"Provide compatibility with Foliant 1.0.7.","title":"[2018-11-14] foliantcontrib.pandoc 1.0.7"},{"location":"releases/#2018-11-14-foliantcontribmkdocs-106","text":"Provide compatibility with Foliant 1.0.7.","title":"[2018-11-14] foliantcontrib.mkdocs 1.0.6"},{"location":"releases/#2018-11-14-foliant-107","text":"Remove spinner made with Halo. Abolish quiet mode because it is useless if extensions are allowed to write anything to STDOUT. Show full tracebacks in debug mode; write full tracebacks into logs.","title":"[2018-11-14] foliant 1.0.7"},{"location":"releases/#2018-11-13-foliantcontribinit-106","text":"Provide compatibility with Foliant 1.0.7.","title":"[2018-11-13] foliantcontrib.init 1.0.6"},{"location":"releases/#2018-11-12-foliantcontribmultilinetables-122","text":"Problem with deletion of table strings containing only spaces fixed (critical for lists in grid tables).","title":"[2018-11-12] foliantcontrib.multilinetables 1.2.2"},{"location":"releases/#2018-11-09-foliantcontribsubset-105","text":"Do not use yaml alias for oyaml module to prevent possible influence of this overriding on other parts of code.","title":"[2018-11-09] foliantcontrib.subset 1.0.5"},{"location":"releases/#2018-11-09-foliantcontribplantuml-104","text":"Additionally \u0441heck if diagram image is not saved.","title":"[2018-11-09] foliantcontrib.plantuml 1.0.4"},{"location":"releases/#2018-11-09-foliantcontribblockdiag-103","text":"Do not fail the preprocessor if some diagrams contain errors. Write error messages into the log.","title":"[2018-11-09] foliantcontrib.blockdiag 1.0.3"},{"location":"releases/#2018-11-08-foliantcontribslate-103","text":"Add slate preprocessor which copies the images outside src into the slate project.","title":"[2018-11-08] foliantcontrib.slate 1.0.3"},{"location":"releases/#2018-11-08-foliantcontribtestrail-107","text":"Minor fixes.","title":"[2018-11-08] foliantcontrib.testrail 1.0.7"},{"location":"releases/#2018-11-08-foliantcontribplantuml-103","text":"Add parse_raw option. Do not fail the preprocessor if some diagrams contain errors. Write error messages into the log.","title":"[2018-11-08] foliantcontrib.plantuml 1.0.3"},{"location":"releases/#2018-11-08-foliantcontribtestrail-106","text":"Added: parameters to exclude suite and section headers from the final document.","title":"[2018-11-08] foliantcontrib.testrail 1.0.6"},{"location":"releases/#2018-11-07-foliantcontribtestrail-105","text":"Minor fixes.","title":"[2018-11-07] foliantcontrib.testrail 1.0.5"},{"location":"releases/#2018-11-07-foliantcontribtestrail-104","text":"Fixed: if there is only one suite in project, it's header not added to the contents.","title":"[2018-11-07] foliantcontrib.testrail 1.0.4"},{"location":"releases/#2018-11-02-foliantcontribgupload-114","text":"Code refactored.","title":"[2018-11-02] foliantcontrib.gupload 1.1.4"},{"location":"releases/#2018-11-01-foliantcontribtemplatespreprocessor-101","text":"Add package_data to setup.py .","title":"[2018-11-01] foliantcontrib.templates.preprocessor 1.0.1"},{"location":"releases/#2018-11-01-foliantcontribgupload-113","text":"Logger bug fixed.","title":"[2018-11-01] foliantcontrib.gupload 1.1.3"},{"location":"releases/#2018-10-31-foliantcontribswaggerdoc-112","text":"Bug fixes All path parameters in config now accept either strings or !path strings","title":"[2018-10-31] foliantcontrib.swaggerdoc 1.1.2"},{"location":"releases/#2018-10-31-foliantcontribswaggerdoc-111","text":"Add 'additional_json_path' param for jinja mode Add support for several json_urls","title":"[2018-10-31] foliantcontrib.swaggerdoc 1.1.1"},{"location":"releases/#2018-10-30-foliantcontribmultilinetables-121","text":"Possibility to rewrite source files added.","title":"[2018-10-30] foliantcontrib.multilinetables 1.2.1"},{"location":"releases/#2018-10-30-foliantcontribtestrail-103","text":"Possibility to rewrite source file added.","title":"[2018-10-30] foliantcontrib.testrail 1.0.3"},{"location":"releases/#2018-10-29-foliantcontribbindsympli-107","text":"Use 60-seconds timeout instead of 30-seconds. Provide multiple attempts to open pages.","title":"[2018-10-29] foliantcontrib.bindsympli 1.0.7"},{"location":"releases/#2018-10-29-foliantcontribtestrail-102","text":"Suites collecting fixed.","title":"[2018-10-29] foliantcontrib.testrail 1.0.2"},{"location":"releases/#2018-10-29-foliantcontribmultilinetables-120","text":"Convertation th the grid format added for arbitrary cell' content (multiple paragraphs, code blocks, lists, etc.).","title":"[2018-10-29] foliantcontrib.multilinetables 1.2.0"},{"location":"releases/#2018-10-24-foliantcontribmultiproject-107","text":"Allow to override the edit_uri config option of RepoLink preprocessor with the FOLIANT_REPOLINK_EDIT_URI system environment variable.","title":"[2018-10-24] foliantcontrib.multiproject 1.0.7"},{"location":"releases/#2018-10-23-foliantcontribmultiproject-106","text":"Tidy up CLI arguments.","title":"[2018-10-23] foliantcontrib.multiproject 1.0.6"},{"location":"releases/#2018-10-23-foliantcontribsubset-104","text":"Tidy up command line arguments one more time.","title":"[2018-10-23] foliantcontrib.subset 1.0.4"},{"location":"releases/#2018-10-23-foliantcontribsubset-103","text":"Tidy up command line arguments.","title":"[2018-10-23] foliantcontrib.subset 1.0.3"},{"location":"releases/#2018-10-23-foliantcontribsubset-102","text":"Fix a bug with object names.","title":"[2018-10-23] foliantcontrib.subset 1.0.2"},{"location":"releases/#2018-10-22-foliantcontribsubset-101","text":"Parse YAML fairly. Merge config files recursively.","title":"[2018-10-22] foliantcontrib.subset 1.0.1"},{"location":"releases/#2018-10-19-foliantcontribswaggerdoc-110","text":"Change parameter names and behavior uncompatible with 1.0.0 Add conversion to md with widdershins","title":"[2018-10-19] foliantcontrib.swaggerdoc 1.1.0"},{"location":"releases/#2018-10-11-foliantcontribincludes-109","text":"Don\u2019t crash on failed repo sync (i.e. when you\u2019re offline).","title":"[2018-10-11] foliantcontrib.includes 1.0.9"},{"location":"releases/#2018-10-11-foliantcontribmkdocs-105","text":"Require MkDocs 1.0.4.","title":"[2018-10-11] foliantcontrib.mkdocs 1.0.5"},{"location":"releases/#2018-10-02-foliantcontribreplace-101","text":"Strings with image links are ignored.","title":"[2018-10-02] foliantcontrib.replace 1.0.1"},{"location":"releases/#2018-10-01-foliantcontribgupload-112","text":"Convert to google docs format setting added.","title":"[2018-10-01] foliantcontrib.gupload 1.1.2"},{"location":"releases/#2018-09-25-foliantcontribgupload-111","text":"Unification of repository name, settings section name, and command.","title":"[2018-09-25] foliantcontrib.gupload 1.1.1"},{"location":"releases/#2018-09-25-foliantcontribgupload-110","text":"Backend was converted to CLI extension.","title":"[2018-09-25] foliantcontrib.gupload 1.1.0"},{"location":"releases/#2018-09-25-foliantcontribmultilinetables-113","text":"'targets' option added to the preprocessor settings.","title":"[2018-09-25] foliantcontrib.multilinetables 1.1.3"},{"location":"releases/#2018-09-21-foliantcontribslate-102","text":"Rename shards_path param to shards. It now accepts string or list. Fix no header param.","title":"[2018-09-21] foliantcontrib.slate 1.0.2"},{"location":"releases/#2018-09-20-foliantcontribslate-101","text":"Remove flatten. First chapter goes to index.html.md; all the rest go into the includes.","title":"[2018-09-20] foliantcontrib.slate 1.0.1"},{"location":"releases/#2018-09-18-foliantcontribgupload-101","text":"Command line authentication was added, for example for Docker use.","title":"[2018-09-18] foliantcontrib.gupload 1.0.1"},{"location":"releases/#2018-09-14-foliantcontribtestrail-101","text":"Preprocessor folder structure fixed.","title":"[2018-09-14] foliantcontrib.testrail 1.0.1"},{"location":"releases/#2018-09-12-foliantcontribbindsympli-106","text":"Do not disable images downloading. Use delays when filling email and password fields. Wait for idle network connections when loading pages.","title":"[2018-09-12] foliantcontrib.bindsympli 1.0.6"},{"location":"releases/#2018-08-31-foliant-106","text":"CLI: If no args are provided, print help. Fix tags searching pattern in _unescape preprocessor.","title":"[2018-08-31] foliant 1.0.6"},{"location":"releases/#2018-08-29-foliantcontribpgsqldoc-112","text":"Queries are now ordered (not adjustable right now) Flexable filters instead of strict filtering by schema","title":"[2018-08-29] foliantcontrib.pgsqldoc 1.1.2"},{"location":"releases/#2018-08-27-foliantcontribpgsqldoc-111","text":"Fix scheme template (blank lines issue) Refactor queries code","title":"[2018-08-27] foliantcontrib.pgsqldoc 1.1.1"},{"location":"releases/#2018-08-24-foliantcontribmultilinetables-112","text":"Now it's possible to break the text anywhere in multiline tables with custom tag. Fixed determination of columns number in tables with and without side lines.","title":"[2018-08-24] foliantcontrib.multilinetables 1.1.2"},{"location":"releases/#2018-08-24-foliantcontribpgsqldoc-110","text":"Docs and scheme structure is now defined by Jinja2 templates.","title":"[2018-08-24] foliantcontrib.pgsqldoc 1.1.0"},{"location":"releases/#2018-08-22-foliantcontribmultilinetables-111","text":"Bug with regular expression fixed. 3+ code strings with || operator in a row are not perceived as a tables now.","title":"[2018-08-22] foliantcontrib.multilinetables 1.1.1"},{"location":"releases/#2018-08-22-foliantcontribmultilinetables-110","text":"Code strings with || operator are not perceived as a tables now.","title":"[2018-08-22] foliantcontrib.multilinetables 1.1.0"},{"location":"releases/#2018-07-31-foliantcontribbump-102","text":"Declare semver as dependency.","title":"[2018-07-31] foliantcontrib.bump 1.0.2"},{"location":"releases/#2018-07-29-foliantcontribbump-101","text":"Fix packaging with setup.py. Poetry doesn't quite do the trick \ud83d\ude14","title":"[2018-07-29] foliantcontrib.bump 1.0.1"},{"location":"releases/#2018-07-28-foliantcontribbump-100","text":"Initial release.","title":"[2018-07-28] foliantcontrib.bump 1.0.0"},{"location":"releases/#2018-07-24-foliantcontribmkdocs-104","text":"Provide customizable default names for untitled nested groups of chapters.","title":"[2018-07-24] foliantcontrib.mkdocs 1.0.4"},{"location":"releases/#2018-07-24-foliantcontribflatten-104","text":"Skip empty headings of nested subsections.","title":"[2018-07-24] foliantcontrib.flatten 1.0.4"},{"location":"releases/#2018-07-23-foliantcontribincludes-108","text":"Require at least one space after hashes in the beginning of each heading. Add inline option to the <include> tag. Fix the bug: do not ignore empty lines after headings when using sethead . Fix the bug: allow to use less than 3 characters in the heading content. Do not mark as headings the strings that contain more than 6 leading hashes. If shifted heading level is more than 6, mark the heading content as bold paragraph text, not as heading.","title":"[2018-07-23] foliantcontrib.includes 1.0.8"},{"location":"releases/#2018-06-08-foliantcontribmultiproject-105","text":"Provide Git submodules support.","title":"[2018-06-08] foliantcontrib.multiproject 1.0.5"},{"location":"releases/#2018-06-07-foliantcontribflatten-103","text":"Use flattened file path in includes preprocessor call. Require includes preprocessor 1.0.7.","title":"[2018-06-07] foliantcontrib.flatten 1.0.3"},{"location":"releases/#2018-06-06-foliantcontribincludes-107","text":"Fix paths resolving in case of recursive processing of include statements. Allow revision markers in repo aliases.","title":"[2018-06-06] foliantcontrib.includes 1.0.7"},{"location":"releases/#2018-06-04-foliantcontribincludes-106","text":"Fix logging in file search method. Fix top heading level calculation.","title":"[2018-06-04] foliantcontrib.includes 1.0.6"},{"location":"releases/#2018-06-04-foliantcontribmultiproject-104","text":"Provide compatibility with Foliant 1.0.5. Allow to use multiple config files.","title":"[2018-06-04] foliantcontrib.multiproject 1.0.4"},{"location":"releases/#2018-06-04-foliantcontribpandoc-106","text":"Apply flatten after all preprocessors, not before them. This fixes incompatibility with foliantcontrib.includes 1.0.5.","title":"[2018-06-04] foliantcontrib.pandoc 1.0.6"},{"location":"releases/#2018-06-04-foliantcontribflatten-102","text":"Fix incorrect includes preprocessor call. Require Foliant 1.0.5.","title":"[2018-06-04] foliantcontrib.flatten 1.0.2"},{"location":"releases/#2018-06-04-foliantcontribinit-105","text":"Require Foliant 1.0.5 with prompt_toolkit^2.0.0.","title":"[2018-06-04] foliantcontrib.init 1.0.5"},{"location":"releases/#2018-05-30-foliantcontribcustomids-104","text":"Provide separate block-level HTML elements for the anchors. Allow to define custom stylesheets for these elements.","title":"[2018-05-30] foliantcontrib.customids 1.0.4"},{"location":"releases/#2018-05-25-foliantcontribincludes-105","text":"Use paths that are relative to the current processed Markdown file. Fix sethead behavior for headings that contains hashes ( # ).","title":"[2018-05-25] foliantcontrib.includes 1.0.5"},{"location":"releases/#2018-05-14-foliant-105","text":"Allow to override default config file name in CLI. Allow multiline tags. Process true and false attribute values as boolean, not as integer. Add tests. Improve code style.","title":"[2018-05-14] foliant 1.0.5"},{"location":"releases/#2018-05-10-foliantcontribpandoc-105","text":"Add slug config option.","title":"[2018-05-10] foliantcontrib.pandoc 1.0.5"},{"location":"releases/#2018-05-08-foliantcontribmultiproject-103","text":"Fix config loading. Other small fixes.","title":"[2018-05-08] foliantcontrib.multiproject 1.0.3"},{"location":"releases/#2018-04-25-foliantcontribmultiproject-102","text":"Fix bugs with the project directory path and Git repos syncronizing.","title":"[2018-04-25] foliantcontrib.multiproject 1.0.2"},{"location":"releases/#2018-04-23-foliantcontribmultiproject-101","text":"Fix logging.","title":"[2018-04-23] foliantcontrib.multiproject 1.0.1"},{"location":"releases/#2018-04-20-foliantcontribbindsympli-105","text":"Add logging.","title":"[2018-04-20] foliantcontrib.bindsympli 1.0.5"},{"location":"releases/#2018-04-20-foliantcontribplantuml-102","text":"Fix logging in __init__ .","title":"[2018-04-20] foliantcontrib.plantuml 1.0.2"},{"location":"releases/#2018-04-20-foliantcontribplantuml-101","text":"Add logging.","title":"[2018-04-20] foliantcontrib.plantuml 1.0.1"},{"location":"releases/#2018-04-20-foliantcontribflatten-101","text":"Fix incorrect includes preprocessor call. Add logging. Require Foliant 1.0.4.","title":"[2018-04-20] foliantcontrib.flatten 1.0.1"},{"location":"releases/#2018-04-19-foliantcontribepsconvert-104","text":"Do not use image path when computing MD5 hash. Add targets config option. Add logging.","title":"[2018-04-19] foliantcontrib.epsconvert 1.0.4"},{"location":"releases/#2018-04-19-foliantcontribtemplatespreprocessor-100","text":"Initial release.","title":"[2018-04-19] foliantcontrib.templates.preprocessor 1.0.0"},{"location":"releases/#2018-04-18-foliantcontribcustomids-103","text":"Add targets config option. Add logging.","title":"[2018-04-18] foliantcontrib.customids 1.0.3"},{"location":"releases/#2018-04-14-foliantcontribblockdiag-102","text":"Add logging. Require Foliant 1.0.4.","title":"[2018-04-14] foliantcontrib.blockdiag 1.0.2"},{"location":"releases/#2018-04-14-foliantcontribpandoc-104","text":"Add logs. Update for Foliant 1.0.4: Pass logger to spinner. Require Foliant 1.0.4.","title":"[2018-04-14] foliantcontrib.pandoc 1.0.4"},{"location":"releases/#2018-04-14-foliantcontribmkdocs-103","text":"Add logs. Update for Foliant 1.0.4: Pass logger to spinner. Require Foliant 1.0.4.","title":"[2018-04-14] foliantcontrib.mkdocs 1.0.3"},{"location":"releases/#2018-04-14-foliantcontribinit-104","text":"Replace placeholders in file and directory names. Process *.py files. User Template strings instead of format strings for safer substitutions. Update for Foliant 1.0.4: Pass logger to spinner. Require Foliant 1.0.4.","title":"[2018-04-14] foliantcontrib.init 1.0.4"},{"location":"releases/#2018-04-11-foliant-104","text":"Breaking change. Add logging to all stages of building a project. Config parser extensions, CLI extensions, backends, and preprocessors can now access self.logger and create child loggers with self.logger = self.logger.getChild('newbackend') . Add pre backend with pre target that applies the preprocessors from the config and returns a Foliant project that doesn't require any preprocessing. make now returns its result, which makes is easier to call it from extensions.","title":"[2018-04-11] foliant 1.0.4"},{"location":"releases/#2018-04-10-foliantcontribbindsympli-104","text":"Describe the preprocessor usage in README.md .","title":"[2018-04-10] foliantcontrib.bindsympli 1.0.4"},{"location":"releases/#2018-04-10-foliantcontribbindsympli-103","text":"Eliminate external Perl scripts, rewrite the preprocessor code in Python.","title":"[2018-04-10] foliantcontrib.bindsympli 1.0.3"},{"location":"releases/#2018-04-02-foliant-103","text":"Fix critical issue when config parsing would fail if any config value contained non-latin characters.","title":"[2018-04-02] foliant 1.0.3"},{"location":"releases/#2018-04-01-foliantcontribincludes-104","text":"Fix the pattern for headings detection.","title":"[2018-04-01] foliantcontrib.includes 1.0.4"},{"location":"releases/#2018-03-31-foliantcontribincludes-103","text":"Allow hashes ( # characters) in the content of headings.","title":"[2018-03-31] foliantcontrib.includes 1.0.3"},{"location":"releases/#2018-03-29-foliantcontribepsconvert-103","text":"Take into account the content of image file when computing MD5 hash.","title":"[2018-03-29] foliantcontrib.epsconvert 1.0.3"},{"location":"releases/#2018-03-29-foliantcontribepsconvert-102","text":"Add support of any local paths. Add image cache. Remove mogrify_path and diagrams_cache_dir options, add convert_path and cache_dir instead.","title":"[2018-03-29] foliantcontrib.epsconvert 1.0.2"},{"location":"releases/#2018-03-28-foliantcontribcustomids-102","text":"Process first heading and all other headings separately.","title":"[2018-03-28] foliantcontrib.customids 1.0.2"},{"location":"releases/#2018-03-27-foliantcontribcustomids-101","text":"Update README.md and docstrings. Update long description content type in setup.py","title":"[2018-03-27] foliantcontrib.customids 1.0.1"},{"location":"releases/#2018-03-27-foliantcontribbindsympli-102","text":"Change the path for non-Python scripts once more.","title":"[2018-03-27] foliantcontrib.bindsympli 1.0.2"},{"location":"releases/#2018-03-27-foliantcontribbindsympli-101","text":"Change the path for non-Python scripts.","title":"[2018-03-27] foliantcontrib.bindsympli 1.0.1"},{"location":"releases/#2018-03-21-foliantcontribincludes-102","text":"Fix inappropriate translation of image URLs into local paths.","title":"[2018-03-21] foliantcontrib.includes 1.0.2"},{"location":"releases/#2018-03-21-foliantcontribmkdocs-102","text":"Add use_headings and slug options for MkDocs backend. Fix inappropriate translation of image URLs into local paths in MkDocs preprocessor.","title":"[2018-03-21] foliantcontrib.mkdocs 1.0.2"},{"location":"releases/#2018-03-17-foliant-102","text":"Use README.md as package description.","title":"[2018-03-17] foliant 1.0.2"},{"location":"releases/#2018-03-13-foliantcontribepsconvert-101","text":"Add diagrams_cache_dir option support.","title":"[2018-03-13] foliantcontrib.epsconvert 1.0.1"},{"location":"releases/#2018-02-28-foliantcontribpandoc-103","text":"Change Pandoc command line parameter --reference-docx to --reference-doc .","title":"[2018-02-28] foliantcontrib.pandoc 1.0.3"},{"location":"releases/#2018-02-25-foliant-101","text":"Fix critical bug with CLI module caused by missing version definition in the root __init__.py file.","title":"[2018-02-25] foliant 1.0.1"},{"location":"releases/#2018-02-23-foliant-100","text":"Complete rewrite.","title":"[2018-02-23] foliant 1.0.0"},{"location":"releases/#2018-02-16-foliantcontribblockdiag-101","text":"Add pdf output format support.","title":"[2018-02-16] foliantcontrib.blockdiag 1.0.1"},{"location":"releases/#2018-02-07-foliantcontribinit-103","text":"Upon creation, relative path to the created project directory is returned instead of an absolute one. Templates: basic: Foliant docs related content removed from README.md. Templates: basic: foliantcontrib.mkdocs added to requirements.txt.","title":"[2018-02-07] foliantcontrib.init 1.0.3"},{"location":"releases/#2018-02-07-foliantcontribinit-102","text":"Add slug placeholder. Process placeholders in .yml , .txt , and .md files, not just foliant.yml . Templates: basic: Add Dockerfile , docker-compose.yml , requirements.txt , and README.md .","title":"[2018-02-07] foliantcontrib.init 1.0.2"},{"location":"releases/#2018-02-07-foliantcontribinit-101","text":"Fix issue with init command missing after installation. Fix issue with missing templates after installation.","title":"[2018-02-07] foliantcontrib.init 1.0.1"},{"location":"releases/#2018-02-01-foliantcontribmacros-103","text":"Add tag <m>...</m> .","title":"[2018-02-01] foliantcontrib.macros 1.0.3"},{"location":"releases/#2018-01-17-foliantcontribmacros-102","text":"Switch from unnamed to named parameters. Macro name is now defined in the tag body instead of \"name\" option.","title":"[2018-01-17] foliantcontrib.macros 1.0.2"},{"location":"releases/#2018-01-15-foliantcontribmacros-101","text":"Preserve param case.","title":"[2018-01-15] foliantcontrib.macros 1.0.1"},{"location":"releases/#2018-01-06-foliantcontribflags-101","text":"Add targets and backends options to <if> tag.","title":"[2018-01-06] foliantcontrib.flags 1.0.1"},{"location":"releases/#2018-01-05-foliantcontribpandoc-102","text":"Change default Markdown flavor from markdown_strict to markdown .","title":"[2018-01-05] foliantcontrib.pandoc 1.0.2"},{"location":"releases/#2017-12-17-foliantcontribpandoc-101","text":"Add tex target.","title":"[2017-12-17] foliantcontrib.pandoc 1.0.1"},{"location":"releases/#2017-12-16-foliantcontribmkdocs-101","text":"Add ghp target for GitHub Pages deploy with mkdocs gh-deploy .","title":"[2017-12-16] foliantcontrib.mkdocs 1.0.1"},{"location":"releases/#2017-12-15-foliantcontribincludes-101","text":"Fix git repo name detection when the repo part contains full stops.","title":"[2017-12-15] foliantcontrib.includes 1.0.1"},{"location":"backends/confluence/","text":"Confluence \u00b6 $https://github.com/foliant-docs/foliantcontrib.confluence.git$README.md","title":"Confluence"},{"location":"backends/confluence/#confluence","text":"$https://github.com/foliant-docs/foliantcontrib.confluence.git$README.md","title":"Confluence"},{"location":"backends/mkdocs/","text":"MkDocs \u00b6 $https://github.com/foliant-docs/foliantcontrib.mkdocs.git$README.md","title":"MkDocs"},{"location":"backends/mkdocs/#mkdocs","text":"$https://github.com/foliant-docs/foliantcontrib.mkdocs.git$README.md","title":"MkDocs"},{"location":"backends/pandoc/","text":"Pandoc \u00b6 $https://github.com/foliant-docs/foliantcontrib.pandoc.git$README.md","title":"Pandoc"},{"location":"backends/pandoc/#pandoc","text":"$https://github.com/foliant-docs/foliantcontrib.pandoc.git$README.md","title":"Pandoc"},{"location":"backends/slate/","text":"Slate \u00b6 $https://github.com/foliant-docs/foliantcontrib.slate.git$README.md","title":"Slate"},{"location":"backends/slate/#slate","text":"$https://github.com/foliant-docs/foliantcontrib.slate.git$README.md","title":"Slate"},{"location":"cli/bump/","text":"Bump \u00b6 This CLI extension adds bump command that lets you bump Foliant project semantic version without editing the config manually. Installation \u00b6 $ pip install foliantcontrib.bump Usage \u00b6 Bump version from \"1.0.0\" to \"1.0.1\": $ foliant bump Version bumped from 1 .0.0 to 1 .0.1. Bump major version: $ foliant bump -v major Version bumped from 1 .0.1 to 2 .0.0. To see all available options, run foliant bump --help : $ foliant bump --help usage: foliant bump [ -h ] [ -v VERSION_PART ] [ -p PATH ] [ -c CONFIG ] Bump Foliant project version. optional arguments: -h, --help show this help message and exit -v VERSION_PART, --version-part VERSION_PART Part of the version to bump: major, minor, patch, prerelease, or build ( default: patch ) . -p PATH, --path PATH Path to the directory with the config file ( default: \".\" ) . -c CONFIG, --config CONFIG Name of the config file ( default: \"foliant.yml\" ) .","title":"Bump"},{"location":"cli/bump/#bump","text":"This CLI extension adds bump command that lets you bump Foliant project semantic version without editing the config manually.","title":"Bump"},{"location":"cli/bump/#installation","text":"$ pip install foliantcontrib.bump","title":"Installation"},{"location":"cli/bump/#usage","text":"Bump version from \"1.0.0\" to \"1.0.1\": $ foliant bump Version bumped from 1 .0.0 to 1 .0.1. Bump major version: $ foliant bump -v major Version bumped from 1 .0.1 to 2 .0.0. To see all available options, run foliant bump --help : $ foliant bump --help usage: foliant bump [ -h ] [ -v VERSION_PART ] [ -p PATH ] [ -c CONFIG ] Bump Foliant project version. optional arguments: -h, --help show this help message and exit -v VERSION_PART, --version-part VERSION_PART Part of the version to bump: major, minor, patch, prerelease, or build ( default: patch ) . -p PATH, --path PATH Path to the directory with the config file ( default: \".\" ) . -c CONFIG, --config CONFIG Name of the config file ( default: \"foliant.yml\" ) .","title":"Usage"},{"location":"cli/gupload/","text":"Gupload \u00b6 Gupload is the Foliant CLI extension, it's used to upload created documents to Google Drive. Gupload adds gupload command to Foliant. Installation \u00b6 $ pip install foliantcontrib.gupload Config \u00b6 To config the CLI extension, add gupload section in the project config. As gupload needs document to upload, appropriate backend settings also have to be here. CLI extension has a number of options (all fields are required but can have no values): gupload : gdrive_folder_name : Foliant upload gdrive_folder_id : gdoc_title : gdoc_id : convert_file : com_line_auth : false gdrive_folder_name Folder with this name will be created on Google Drive to upload file. gdrive_folder_id This field is necessary to upload files to previously created folder. gdoc_title Uploaded file will have this title. If empty, real filename will be used. gdoc_id This field is necessary to rewrite previously uploaded file and keep the link to it. convert_file Convert uploaded files to google docs format or not. com_line_auth In some cases it's impossible to authenticate automatically (for example, with Docker), so you can set True and use command line authentication procedure. Usage \u00b6 At first you have to get Google Drive authentication file. Go to APIs Console and make your own project. Go to library , search for \u2018Google Drive API\u2019, select the entry, and click \u2018Enable\u2019. Select \u2018Credentials\u2019 from the left menu, click \u2018Create Credentials\u2019, select \u2018OAuth client ID\u2019. Now, the product name and consent screen need to be set -> click \u2018Configure consent screen\u2019 and follow the instructions. Once finished: Select \u2018Application type\u2019 to be Other types . Enter an appropriate name. Input http://localhost:8080 for \u2018Authorized JavaScript origins\u2019. Input http://localhost:8080/ for \u2018Authorized redirect URIs\u2019. Click \u2018Save\u2019. Click \u2018Download JSON\u2019 on the right side of Client ID to download client_secret_ .json. The downloaded file has all authentication information of your application. Rename the file to \u201cclient_secrets.json\u201d and place it in your working directory near foliant.yml. Now add the CLI extension to the project config with all settings strings. At this moment you have no data to set Google Drive folder ID and google doc ID so keep it empty. Run Foliant with gupload command: $ foliant gupload docx \u2714 Parsing config \u2714 Applying preprocessor flatten \u2714 Making docx with Pandoc \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: filename.docx \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2714 Parsing config Your browser has been opened to visit: https://accounts.google.com/o/oauth2/auth?... Authentication successful. \u2714 Uploading 'filename.docx' to Google Drive \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Doc link: https://docs.google.com/document/d/1GPvNSMJ4ZutZJwhUYM1xxCKWMU5Sg/edit?usp = drivesdk Google drive folder ID: 1AaiWMNIYlq9639P30R3T9 Google document ID: 1GPvNSMJ4Z19YM1xCKWMU5Sg Authentication form will be opened. Choose account to log in. With command line authentication procedure differs little bit: $ docker-compose run --rm foliant gupload docx \u2714 Parsing config \u2714 Applying preprocessor flatten \u2714 Making docx with Pandoc \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: filename.docx \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2714 Parsing config Go to the following link in your browser: https://accounts.google.com/o/oauth2/auth?... Enter verification code: 4 /XgBllTXpxv8kKjsiTxLc Authentication successful. \u2714 Uploading 'filename.docx' to Google Drive \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Doc link: https://docs.google.com/document/d/1GPvNSMJ4ZutZJwhUYM1xxCKWMU5Sg/edit?usp = drivesdk Google drive folder ID: 1AaiWMNIYlq9639P30R3T9 Google document ID: 1GPvNSMJ4Z19YM1xCKWMU5Sg Copy link from terminal to your browser, choose account to log in and copy generated code back to the terminal. After that the document will be uploaded to Google Drive and opened in new browser tab. Now you can use Google Drive folder ID to upload files to the same folder and google doc ID to rewrite document (also you can IDs in folder and file links). Notes \u00b6 If you set up google doc ID without Google Drive folder ID file will be moved to the new folder with the same link.","title":"Gupload"},{"location":"cli/gupload/#gupload","text":"Gupload is the Foliant CLI extension, it's used to upload created documents to Google Drive. Gupload adds gupload command to Foliant.","title":"Gupload"},{"location":"cli/gupload/#installation","text":"$ pip install foliantcontrib.gupload","title":"Installation"},{"location":"cli/gupload/#config","text":"To config the CLI extension, add gupload section in the project config. As gupload needs document to upload, appropriate backend settings also have to be here. CLI extension has a number of options (all fields are required but can have no values): gupload : gdrive_folder_name : Foliant upload gdrive_folder_id : gdoc_title : gdoc_id : convert_file : com_line_auth : false gdrive_folder_name Folder with this name will be created on Google Drive to upload file. gdrive_folder_id This field is necessary to upload files to previously created folder. gdoc_title Uploaded file will have this title. If empty, real filename will be used. gdoc_id This field is necessary to rewrite previously uploaded file and keep the link to it. convert_file Convert uploaded files to google docs format or not. com_line_auth In some cases it's impossible to authenticate automatically (for example, with Docker), so you can set True and use command line authentication procedure.","title":"Config"},{"location":"cli/gupload/#usage","text":"At first you have to get Google Drive authentication file. Go to APIs Console and make your own project. Go to library , search for \u2018Google Drive API\u2019, select the entry, and click \u2018Enable\u2019. Select \u2018Credentials\u2019 from the left menu, click \u2018Create Credentials\u2019, select \u2018OAuth client ID\u2019. Now, the product name and consent screen need to be set -> click \u2018Configure consent screen\u2019 and follow the instructions. Once finished: Select \u2018Application type\u2019 to be Other types . Enter an appropriate name. Input http://localhost:8080 for \u2018Authorized JavaScript origins\u2019. Input http://localhost:8080/ for \u2018Authorized redirect URIs\u2019. Click \u2018Save\u2019. Click \u2018Download JSON\u2019 on the right side of Client ID to download client_secret_ .json. The downloaded file has all authentication information of your application. Rename the file to \u201cclient_secrets.json\u201d and place it in your working directory near foliant.yml. Now add the CLI extension to the project config with all settings strings. At this moment you have no data to set Google Drive folder ID and google doc ID so keep it empty. Run Foliant with gupload command: $ foliant gupload docx \u2714 Parsing config \u2714 Applying preprocessor flatten \u2714 Making docx with Pandoc \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: filename.docx \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2714 Parsing config Your browser has been opened to visit: https://accounts.google.com/o/oauth2/auth?... Authentication successful. \u2714 Uploading 'filename.docx' to Google Drive \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Doc link: https://docs.google.com/document/d/1GPvNSMJ4ZutZJwhUYM1xxCKWMU5Sg/edit?usp = drivesdk Google drive folder ID: 1AaiWMNIYlq9639P30R3T9 Google document ID: 1GPvNSMJ4Z19YM1xCKWMU5Sg Authentication form will be opened. Choose account to log in. With command line authentication procedure differs little bit: $ docker-compose run --rm foliant gupload docx \u2714 Parsing config \u2714 Applying preprocessor flatten \u2714 Making docx with Pandoc \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: filename.docx \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2714 Parsing config Go to the following link in your browser: https://accounts.google.com/o/oauth2/auth?... Enter verification code: 4 /XgBllTXpxv8kKjsiTxLc Authentication successful. \u2714 Uploading 'filename.docx' to Google Drive \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Doc link: https://docs.google.com/document/d/1GPvNSMJ4ZutZJwhUYM1xxCKWMU5Sg/edit?usp = drivesdk Google drive folder ID: 1AaiWMNIYlq9639P30R3T9 Google document ID: 1GPvNSMJ4Z19YM1xCKWMU5Sg Copy link from terminal to your browser, choose account to log in and copy generated code back to the terminal. After that the document will be uploaded to Google Drive and opened in new browser tab. Now you can use Google Drive folder ID to upload files to the same folder and google doc ID to rewrite document (also you can IDs in folder and file links).","title":"Usage"},{"location":"cli/gupload/#notes","text":"If you set up google doc ID without Google Drive folder ID file will be moved to the new folder with the same link.","title":"Notes"},{"location":"cli/meta/","text":"Meta \u00b6 Metadata for Foliant \u00b6 This extension adds the meta generate command to Foliant, which generates the yaml-file with project metadata. It also allows to add other meta commands meta <command> which use the generated metadata. It also adds the preprocessor meta which removes metadata blocks from the documents before builds and allows inserting formatted strings on the place of meta blocks, based on specific metadata keys. Installation \u00b6 $ pip install foliantcontrib.meta Specifying metadata \u00b6 Metadata may be specified in the beginning of a Markdown-file using YAML Front Matter format: --- id : MAIN_DOC title : Description of the product key : value --- meta generate command \u00b6 Usage \u00b6 To generate meta file run the meta generate command: $ foliant meta generate Metadata for the document will appear in the meta.yml file. Config \u00b6 Meta generate command has just one option right now. It is specified under meta section in config: meta : filename : meta.yml filename name of the YAML-file with generated project metadata. meta preprocessor \u00b6 meta preprocessor allows you to remove metadata from your Markdown source files before build. It may be necessary if some backend doesn't accept the YAML Front Matter syntax. This preprocessor also offers you a feature which we call seeds : Seeds are little string templates which will may be used to add some text after the metadata block in the resulting document, if specific keys were mentioned in the metadata. Details in the Seeds section. Usage \u00b6 Add meta preprocessor to your preprocessors section of foliant.yml and specify all your seeds: preprocessors : - meta : delete_meta : true seeds : section : '*Section \"{value}\"*' id : <anchor>{value}</anchor> delete_meta If set to true \u2014 metadata block will be deleted from the document before build. Default: false seeds Seeds dictionary. Details in the next section. Seeds \u00b6 Seeds allow you to add small chunks of text based on specific keys mentioned in the metadata block. For example, if you wish to add a small subcaption at the beginning of the document, which will use this document's title, add the title seed: preprocessors : - meta : seeds : title : '*Section \"{value}\"*' If we have a meta block like this in our document: --- ID : legal_info relates : index.md title : Legal information --- ## Terms of use Preprocessor will notice that title key was used in the meta block, and will add the seed with {value} placeholder replaced by the value of the title field: * Section \"Legal information\" ## Terms of use","title":"Meta"},{"location":"cli/meta/#meta","text":"","title":"Meta"},{"location":"cli/meta/#metadata-for-foliant","text":"This extension adds the meta generate command to Foliant, which generates the yaml-file with project metadata. It also allows to add other meta commands meta <command> which use the generated metadata. It also adds the preprocessor meta which removes metadata blocks from the documents before builds and allows inserting formatted strings on the place of meta blocks, based on specific metadata keys.","title":"Metadata for Foliant"},{"location":"cli/meta/#installation","text":"$ pip install foliantcontrib.meta","title":"Installation"},{"location":"cli/meta/#specifying-metadata","text":"Metadata may be specified in the beginning of a Markdown-file using YAML Front Matter format: --- id : MAIN_DOC title : Description of the product key : value ---","title":"Specifying metadata"},{"location":"cli/meta/#meta-generate-command","text":"","title":"meta generate command"},{"location":"cli/meta/#usage","text":"To generate meta file run the meta generate command: $ foliant meta generate Metadata for the document will appear in the meta.yml file.","title":"Usage"},{"location":"cli/meta/#config","text":"Meta generate command has just one option right now. It is specified under meta section in config: meta : filename : meta.yml filename name of the YAML-file with generated project metadata.","title":"Config"},{"location":"cli/meta/#meta-preprocessor","text":"meta preprocessor allows you to remove metadata from your Markdown source files before build. It may be necessary if some backend doesn't accept the YAML Front Matter syntax. This preprocessor also offers you a feature which we call seeds : Seeds are little string templates which will may be used to add some text after the metadata block in the resulting document, if specific keys were mentioned in the metadata. Details in the Seeds section.","title":"meta preprocessor"},{"location":"cli/meta/#usage_1","text":"Add meta preprocessor to your preprocessors section of foliant.yml and specify all your seeds: preprocessors : - meta : delete_meta : true seeds : section : '*Section \"{value}\"*' id : <anchor>{value}</anchor> delete_meta If set to true \u2014 metadata block will be deleted from the document before build. Default: false seeds Seeds dictionary. Details in the next section.","title":"Usage"},{"location":"cli/meta/#seeds","text":"Seeds allow you to add small chunks of text based on specific keys mentioned in the metadata block. For example, if you wish to add a small subcaption at the beginning of the document, which will use this document's title, add the title seed: preprocessors : - meta : seeds : title : '*Section \"{value}\"*' If we have a meta block like this in our document: --- ID : legal_info relates : index.md title : Legal information --- ## Terms of use Preprocessor will notice that title key was used in the meta block, and will add the seed with {value} placeholder replaced by the value of the title field: * Section \"Legal information\" ## Terms of use","title":"Seeds"},{"location":"cli/project_graph/","text":"ProjectGraph \u00b6 ProjectGraph \u00b6 Foliant Meta Command which draws a scheme of project sections. This extension uses meta-information, collected by folinatcontrib.meta extension. Graphviz is used to build a scheme. libgraphviz-dev is required to be installed on your machine. Installation \u00b6 $ pip install foliantcontrib.project_graph Usage \u00b6 First you need to specify all relations between the documents in your project. To do this add the relates section to your document's meta-data: --- relates : - tests/test1.md - specs/spec.md --- in relates section you need to specify a list of documents to which current document relates. You can specify either a relative path to connected document or its ID (if the corresponding document has an ID assigned in its meta section): ## index.md --- id : index --- ## glossary.md --- relates : - index --- After you specified all relations, run the draw command: $ foliant draw Scheme will appear in the file project_graph.png Config \u00b6 ProjectGraph has a number of options: project_graph : directed : false filename : project_graph.png gv_attributes : node : shape : rect color : green edge : arrowhead : open graph : ranksep : 1 main_relation : penwidth : 2 directed Specifies graph to be directed or not. Default: false filename Graph output filename. Default: project_graph.png gv_attributes A dictionary with global attributes of the graph. Each dictionary should be stored under the Graphviz Entity key ( node , edge , or graph ), or under type key. All sections or relations which have this type will get these attributes. If you want to adjust the look of just one node, add a gv_attributes option into the meta of the document: --- id : index relates : - glossary gv_attributes : color : green shape : circle --- You can also change the look of the edges, which connect nodes. To do this you can use a detailed syntax of relations. Relations detailed syntax \u00b6 As stated in the beginning, to specify relations you need to add a relates param and include a list of related documents IDs\\file paths: --- relates : - doc1.md - MAIN_SPEC --- But there's also a detailed syntax for specifying relations, it looks like this: --- relates : - rel_path : doc1.md type : details - rel_id : MAIN_SPEC gv_attributes : color : #CCCCCC arrowhead : none --- In the detailed syntax each relation is not a string, but a mapping. This time you have to explicitly use either rel_path key, if you are pointing to a document by path, or rel_id if you do it by ID. Also you can specify relation type by adding a type key. Right now the value of this key just goes to the edge label, but soon you'll be able to change the appearance of all edges with one type. Finally you can override this specific edge's appearance by adjusting Graphviz attributes in the gv_attributes key.","title":"ProjectGraph"},{"location":"cli/project_graph/#projectgraph","text":"","title":"ProjectGraph"},{"location":"cli/project_graph/#projectgraph_1","text":"Foliant Meta Command which draws a scheme of project sections. This extension uses meta-information, collected by folinatcontrib.meta extension. Graphviz is used to build a scheme. libgraphviz-dev is required to be installed on your machine.","title":"ProjectGraph"},{"location":"cli/project_graph/#installation","text":"$ pip install foliantcontrib.project_graph","title":"Installation"},{"location":"cli/project_graph/#usage","text":"First you need to specify all relations between the documents in your project. To do this add the relates section to your document's meta-data: --- relates : - tests/test1.md - specs/spec.md --- in relates section you need to specify a list of documents to which current document relates. You can specify either a relative path to connected document or its ID (if the corresponding document has an ID assigned in its meta section): ## index.md --- id : index --- ## glossary.md --- relates : - index --- After you specified all relations, run the draw command: $ foliant draw Scheme will appear in the file project_graph.png","title":"Usage"},{"location":"cli/project_graph/#config","text":"ProjectGraph has a number of options: project_graph : directed : false filename : project_graph.png gv_attributes : node : shape : rect color : green edge : arrowhead : open graph : ranksep : 1 main_relation : penwidth : 2 directed Specifies graph to be directed or not. Default: false filename Graph output filename. Default: project_graph.png gv_attributes A dictionary with global attributes of the graph. Each dictionary should be stored under the Graphviz Entity key ( node , edge , or graph ), or under type key. All sections or relations which have this type will get these attributes. If you want to adjust the look of just one node, add a gv_attributes option into the meta of the document: --- id : index relates : - glossary gv_attributes : color : green shape : circle --- You can also change the look of the edges, which connect nodes. To do this you can use a detailed syntax of relations.","title":"Config"},{"location":"cli/project_graph/#relations-detailed-syntax","text":"As stated in the beginning, to specify relations you need to add a relates param and include a list of related documents IDs\\file paths: --- relates : - doc1.md - MAIN_SPEC --- But there's also a detailed syntax for specifying relations, it looks like this: --- relates : - rel_path : doc1.md type : details - rel_id : MAIN_SPEC gv_attributes : color : #CCCCCC arrowhead : none --- In the detailed syntax each relation is not a string, but a mapping. This time you have to explicitly use either rel_path key, if you are pointing to a document by path, or rel_id if you do it by ID. Also you can specify relation type by adding a type key. Right now the value of this key just goes to the edge label, but soon you'll be able to change the appearance of all edges with one type. Finally you can override this specific edge's appearance by adjusting Graphviz attributes in the gv_attributes key.","title":"Relations detailed syntax"},{"location":"cli/src/","text":"Src \u00b6 This extension supports the command src to backup the source directory of Foliant project (usually called as src ) and to restore it from prepared backup. Backing up of the source directory is needed because MultiProject extension modifies this directory by moving the directories of built subprojects into it. Installation \u00b6 To enable the src command, install MultiProject extension: $ pip install foliantcontrib.multiproject Usage \u00b6 To make a backup of the source directory, use the command: $ foliant src backup To restore the source directory from the backup, use the command: $ foliant src restore You may use the --config option to specify custom config file name of your Foliant project. By default, the name foliant.yml is used: $ foliant src backup --config alternative_config.yml Also you may specify the root directory of your Foliant project by using the --project-dir option. If not specified, current directory will be used.","title":"Src"},{"location":"cli/src/#src","text":"This extension supports the command src to backup the source directory of Foliant project (usually called as src ) and to restore it from prepared backup. Backing up of the source directory is needed because MultiProject extension modifies this directory by moving the directories of built subprojects into it.","title":"Src"},{"location":"cli/src/#installation","text":"To enable the src command, install MultiProject extension: $ pip install foliantcontrib.multiproject","title":"Installation"},{"location":"cli/src/#usage","text":"To make a backup of the source directory, use the command: $ foliant src backup To restore the source directory from the backup, use the command: $ foliant src restore You may use the --config option to specify custom config file name of your Foliant project. By default, the name foliant.yml is used: $ foliant src backup --config alternative_config.yml Also you may specify the root directory of your Foliant project by using the --project-dir option. If not specified, current directory will be used.","title":"Usage"},{"location":"cli/subset/","text":"Subset \u00b6 This CLI extension adds the command subset that generates a config file for a subset (i.e. a detached part) of the Foliant project. The command uses: the common (i.e. default, single) config file for the whole Foliant project; the part of config that is individual for each subset. The Foliant project may include multiple subsets that are defined by their own partial config files. The command subset takes a path to the subset directory as a mandatory command line parameter. The command subset : reads the partial config of the subset; optionally rewrites the paths of Markdown files that specified there in the chapters section; merges the result with the default config of the whole Foliant project config; finally, writes a new config file that allows to build a certain subset of the Foliant project with the make command. Installation \u00b6 To install the extension, use the command: $ pip install foliantcontrib.subset Usage \u00b6 To get the list of all necessary parameters and available options, run foliant subset --help : $ foliant subset --help usage: foliant subset [ -h ] [ -p PROJECT_DIR_PATH ] [ -c CONFIG ] [ -n ] [ -d ] SUBPATH Generate the config file to build the project subset from SUBPATH. positional arguments: SUBPATH Path to the subset of the Foliant project optional arguments: -h, --help show this help message and exit -p PROJECT_DIR, --project-dir PROJECT_DIR Path to the Foliant project -c CONFIG, --config CONFIG Name of config file of the Foliant project, default 'foliant.yml' -n, --no-rewrite Do not rewrite the paths of Markdown files in the subset partial config -d, --debug Log all events during build. If not set, only warnings and errors are logged In most cases it\u2019s enough to use the default values of optional parameters. You need to specify only the SUBPATH \u2014the directory that should be located inside the Foliant project source directory. Suppose you use the default settings. Then you have to prepare: the common (default) config file foliant.yml in the Foliant project root directory; partial config files for each subset. They also must be named foliant.yml , and they must be located in the directories of the subsets. Your Foliant project tree may look so: $ tree . \u251c\u2500\u2500 foliant.yml \u2514\u2500\u2500 src \u251c\u2500\u2500 group_1 \u2502 \u251c\u2500\u2500 product_1 \u2502 \u2502 \u2514\u2500\u2500 feature_1 \u2502 \u2502 \u251c\u2500\u2500 foliant.yml \u2502 \u2502 \u2514\u2500\u2500 index.md \u2502 \u2514\u2500\u2500 product_2 \u2502 \u251c\u2500\u2500 foliant.yml \u2502 \u2514\u2500\u2500 main.md \u2514\u2500\u2500 group_2 \u251c\u2500\u2500 foliant.yml \u2514\u2500\u2500 intro.md The command foliant subset group_1/product_1/feautre_1 will merge the files ./src/group_1/product_1/feautre_1/foliant.yml and ./foliant.yml , and write the result into the file ./foliant.yml.subset . After that you may use the command like the following to build your Foliant project: $ foliant make pdf --config foliant.yml.subset Let\u2019s look at some examples. The content of the common (default) file ./foliant.yml : title : &title Default Title subtitle : &subtitle Default Subtitle version : &version 0.0 backend_config : pandoc : template : !path /somewhere/template.tex reference_docx : !path /somewhere/reference.docx vars : title : *title version : *version subtitle : *subtitle year : 2018 params : pdf_engine : xelatex The content of the partial config file ./src/group_1/product_1/feautre_1/foliant.yml : title : &title Group 1, Product 1, Feature 1 subtitle : &subtitle Technical Specification version : &version 1.0 chapters : - index.md backend_config : pandoc : vars : year : 2019 The content of newly generated file ./foliant.yml.subset : title : &title Group 1, Product 1, Feature 1 subtitle : &subtitle Technical Specification version : &version 1.0 backend_config : pandoc : template : !path /somewhere/template.tex reference_docx : !path /somewhere/reference.docx vars : title : *title version : *version subtitle : *subtitle year : 2019 params : pdf_engine : xelatex chapters : - b2b/order_1/feature_1/index.md If the option --no-rewrite is not set, the paths of Markdown files that are specified in the chapters section of the file ./src/group_1/product_1/feautre_1/foliant.yml , will be rewritten as if these paths were relative to the directory ./src/group_1/product_1/feautre_1/ . Otherwise, the Subset CLI extension will not rewrite the paths of Markdown files as if they were relative to ./src/ directory. Note that the Subset CLI Extension merges the data of the config files recursively, so any subkeys of default config may be overridden by the settings of partial config.","title":"Subset"},{"location":"cli/subset/#subset","text":"This CLI extension adds the command subset that generates a config file for a subset (i.e. a detached part) of the Foliant project. The command uses: the common (i.e. default, single) config file for the whole Foliant project; the part of config that is individual for each subset. The Foliant project may include multiple subsets that are defined by their own partial config files. The command subset takes a path to the subset directory as a mandatory command line parameter. The command subset : reads the partial config of the subset; optionally rewrites the paths of Markdown files that specified there in the chapters section; merges the result with the default config of the whole Foliant project config; finally, writes a new config file that allows to build a certain subset of the Foliant project with the make command.","title":"Subset"},{"location":"cli/subset/#installation","text":"To install the extension, use the command: $ pip install foliantcontrib.subset","title":"Installation"},{"location":"cli/subset/#usage","text":"To get the list of all necessary parameters and available options, run foliant subset --help : $ foliant subset --help usage: foliant subset [ -h ] [ -p PROJECT_DIR_PATH ] [ -c CONFIG ] [ -n ] [ -d ] SUBPATH Generate the config file to build the project subset from SUBPATH. positional arguments: SUBPATH Path to the subset of the Foliant project optional arguments: -h, --help show this help message and exit -p PROJECT_DIR, --project-dir PROJECT_DIR Path to the Foliant project -c CONFIG, --config CONFIG Name of config file of the Foliant project, default 'foliant.yml' -n, --no-rewrite Do not rewrite the paths of Markdown files in the subset partial config -d, --debug Log all events during build. If not set, only warnings and errors are logged In most cases it\u2019s enough to use the default values of optional parameters. You need to specify only the SUBPATH \u2014the directory that should be located inside the Foliant project source directory. Suppose you use the default settings. Then you have to prepare: the common (default) config file foliant.yml in the Foliant project root directory; partial config files for each subset. They also must be named foliant.yml , and they must be located in the directories of the subsets. Your Foliant project tree may look so: $ tree . \u251c\u2500\u2500 foliant.yml \u2514\u2500\u2500 src \u251c\u2500\u2500 group_1 \u2502 \u251c\u2500\u2500 product_1 \u2502 \u2502 \u2514\u2500\u2500 feature_1 \u2502 \u2502 \u251c\u2500\u2500 foliant.yml \u2502 \u2502 \u2514\u2500\u2500 index.md \u2502 \u2514\u2500\u2500 product_2 \u2502 \u251c\u2500\u2500 foliant.yml \u2502 \u2514\u2500\u2500 main.md \u2514\u2500\u2500 group_2 \u251c\u2500\u2500 foliant.yml \u2514\u2500\u2500 intro.md The command foliant subset group_1/product_1/feautre_1 will merge the files ./src/group_1/product_1/feautre_1/foliant.yml and ./foliant.yml , and write the result into the file ./foliant.yml.subset . After that you may use the command like the following to build your Foliant project: $ foliant make pdf --config foliant.yml.subset Let\u2019s look at some examples. The content of the common (default) file ./foliant.yml : title : &title Default Title subtitle : &subtitle Default Subtitle version : &version 0.0 backend_config : pandoc : template : !path /somewhere/template.tex reference_docx : !path /somewhere/reference.docx vars : title : *title version : *version subtitle : *subtitle year : 2018 params : pdf_engine : xelatex The content of the partial config file ./src/group_1/product_1/feautre_1/foliant.yml : title : &title Group 1, Product 1, Feature 1 subtitle : &subtitle Technical Specification version : &version 1.0 chapters : - index.md backend_config : pandoc : vars : year : 2019 The content of newly generated file ./foliant.yml.subset : title : &title Group 1, Product 1, Feature 1 subtitle : &subtitle Technical Specification version : &version 1.0 backend_config : pandoc : template : !path /somewhere/template.tex reference_docx : !path /somewhere/reference.docx vars : title : *title version : *version subtitle : *subtitle year : 2019 params : pdf_engine : xelatex chapters : - b2b/order_1/feature_1/index.md If the option --no-rewrite is not set, the paths of Markdown files that are specified in the chapters section of the file ./src/group_1/product_1/feautre_1/foliant.yml , will be rewritten as if these paths were relative to the directory ./src/group_1/product_1/feautre_1/ . Otherwise, the Subset CLI extension will not rewrite the paths of Markdown files as if they were relative to ./src/ directory. Note that the Subset CLI Extension merges the data of the config files recursively, so any subkeys of default config may be overridden by the settings of partial config.","title":"Usage"},{"location":"cli/init/","text":"Init \u00b6 This CLI extension add init command that lets you create Foliant projects from templates. Installation \u00b6 $ pip install foliantcontrib.init Usage \u00b6 Create project from the default \u201cbase\u201d template: $ foliant init Enter the project name: Awesome Docs \u2714 Generating Foliant project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Docs\" created in awesome-docs Create project from a custom template: $ foliant init --template /path/to/custom/template Enter the project name: Awesome Customized Docs \u2714 Generating Foliant project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Customized Docs\" created in awesome-customized-docs You can provide the project name without user prompt: $ foliant init --name Awesome Docs \u2714 Generating Foliant project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Docs\" created in awesome-docs Another useful option is --quiet , which hides all output except for the path to the generated project: $ foliant init --name Awesome Docs --quiet awesome-docs To see all available options, run foliant init --help : $ foliant init --help usage: foliant init [ -h ] [ -n NAME ] [ -t NAME or PATH ] [ -q ] Generate new Foliant project. optional arguments: -h, --help show this help message and exit -n NAME, --name NAME Name of the Foliant project -t NAME or PATH, --template NAME or PATH Name of a built-in project template or path to custom one -q, --quiet Hide all output accept for the result. Useful for piping. Project Templates \u00b6 A project template is a regular Foliant project but containing placeholders in files. When the project is generated, the placeholders are replaced with the values you provide. Currently, there are two placeholders: $title and $slug . There is a built-in template called base . It's used by default if no template is specified.","title":"Init"},{"location":"cli/init/#init","text":"This CLI extension add init command that lets you create Foliant projects from templates.","title":"Init"},{"location":"cli/init/#installation","text":"$ pip install foliantcontrib.init","title":"Installation"},{"location":"cli/init/#usage","text":"Create project from the default \u201cbase\u201d template: $ foliant init Enter the project name: Awesome Docs \u2714 Generating Foliant project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Docs\" created in awesome-docs Create project from a custom template: $ foliant init --template /path/to/custom/template Enter the project name: Awesome Customized Docs \u2714 Generating Foliant project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Customized Docs\" created in awesome-customized-docs You can provide the project name without user prompt: $ foliant init --name Awesome Docs \u2714 Generating Foliant project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Docs\" created in awesome-docs Another useful option is --quiet , which hides all output except for the path to the generated project: $ foliant init --name Awesome Docs --quiet awesome-docs To see all available options, run foliant init --help : $ foliant init --help usage: foliant init [ -h ] [ -n NAME ] [ -t NAME or PATH ] [ -q ] Generate new Foliant project. optional arguments: -h, --help show this help message and exit -n NAME, --name NAME Name of the Foliant project -t NAME or PATH, --template NAME or PATH Name of a built-in project template or path to custom one -q, --quiet Hide all output accept for the result. Useful for piping.","title":"Usage"},{"location":"cli/init/#project-templates","text":"A project template is a regular Foliant project but containing placeholders in files. When the project is generated, the placeholders are replaced with the values you provide. Currently, there are two placeholders: $title and $slug . There is a built-in template called base . It's used by default if no template is specified.","title":"Project Templates"},{"location":"cli/init/templates/preprocessor/","text":"Preprocessor \u00b6 Template for a Foliant preprocessor. Instead of looking for an existing preprocessor, cloning it, and modifying its source, install this package and generate a preprocessor directory. As simple as: $ foliant init -t preprocessor Installation \u00b6 $ pip install --no-compile foliantcontrib.templates.preprocessor Usage \u00b6 $ foliant init -t preprocessor Enter the project name: Awesome Preprocessor \u2714 Generating project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Preprocessor\" created in awesome-preprocessor Or: $ foliant init -t preprocessor -n \"Awesome Preprocessor\" \u2714 Generating project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Preprocessor\" created in awesome-preprocessor Result: $ tree awesome-preprocessor . \u251c\u2500\u2500 changelog.md \u251c\u2500\u2500 foliant \u2502 \u2514\u2500\u2500 preprocessors \u2502 \u2514\u2500\u2500 awesome-preprocessor.py \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u2514\u2500\u2500 setup.py 2 directories, 5 files","title":"Preprocessor"},{"location":"cli/init/templates/preprocessor/#preprocessor","text":"Template for a Foliant preprocessor. Instead of looking for an existing preprocessor, cloning it, and modifying its source, install this package and generate a preprocessor directory. As simple as: $ foliant init -t preprocessor","title":"Preprocessor"},{"location":"cli/init/templates/preprocessor/#installation","text":"$ pip install --no-compile foliantcontrib.templates.preprocessor","title":"Installation"},{"location":"cli/init/templates/preprocessor/#usage","text":"$ foliant init -t preprocessor Enter the project name: Awesome Preprocessor \u2714 Generating project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Preprocessor\" created in awesome-preprocessor Or: $ foliant init -t preprocessor -n \"Awesome Preprocessor\" \u2714 Generating project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Preprocessor\" created in awesome-preprocessor Result: $ tree awesome-preprocessor . \u251c\u2500\u2500 changelog.md \u251c\u2500\u2500 foliant \u2502 \u2514\u2500\u2500 preprocessors \u2502 \u2514\u2500\u2500 awesome-preprocessor.py \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u2514\u2500\u2500 setup.py 2 directories, 5 files","title":"Usage"},{"location":"config/from/","text":"MultiProject \u00b6 This extension resolves the !from YAML tag in the project config and replaces the value of the tag with chaptres section of related subproject. Installation \u00b6 $ pip install foliantcontrib.multiproject Usage \u00b6 The subproject location may be specified as a local path, or as a Git repository with optional revision (branch name, commit hash or another reference). Example of chapters section in the project config: chapters : - index.md - !from local_dir - !from https://github.com/foliant-docs/docs.git - !from https://github.com/some_other_group/some_other_repo.git#develop Before building the documentation superproject, Multiproject extension calls Foliant to build each subproject into pre target, and then moves the directories of built subprojects into the source directory of the superproject (usually called as src ). Note that Foliant allows to override default config file name foliant.yml by using --config or -c command line option. To provide correct working of Multiproject extension, the same names of config files should be used in the superproject and in all subprojects.","title":"MultiProject"},{"location":"config/from/#multiproject","text":"This extension resolves the !from YAML tag in the project config and replaces the value of the tag with chaptres section of related subproject.","title":"MultiProject"},{"location":"config/from/#installation","text":"$ pip install foliantcontrib.multiproject","title":"Installation"},{"location":"config/from/#usage","text":"The subproject location may be specified as a local path, or as a Git repository with optional revision (branch name, commit hash or another reference). Example of chapters section in the project config: chapters : - index.md - !from local_dir - !from https://github.com/foliant-docs/docs.git - !from https://github.com/some_other_group/some_other_repo.git#develop Before building the documentation superproject, Multiproject extension calls Foliant to build each subproject into pre target, and then moves the directories of built subprojects into the source directory of the superproject (usually called as src ). Note that Foliant allows to override default config file name foliant.yml by using --config or -c command line option. To provide correct working of Multiproject extension, the same names of config files should be used in the superproject and in all subprojects.","title":"Usage"},{"location":"config/slugs/","text":"Slugs \u00b6 Slugs is an extension for Foliant to generate custom slugs from arbitrary lists of values. It resolves !slug , !date , !version , and !commit_count YAML tags in the project config. The list of values after the !slug tag is replaced with the string that joins these values using - delimeter. Spaces ( ) in the values are replaced with underscores ( _ ). The value of the node that contains the !date tag is replaced with the current local date. The list of values after the !version tag is replaced with the string that joins these values using . delimeter. The value of the node that contains the !commit_count tag is replaced by the number of commits in the current Git repository. Installation \u00b6 $ pip install foliantcontrib.slugs Usage \u00b6 Slug \u00b6 Config example: title : &title My Awesome Project version : &version 1.0 slug : !slug - *title - *version - !date Example of the resulting slug: My_Awesome_Project - 1 . 0 - 2018 - 05 - 10 Note that backends allow to override the top-level slug, so you may define different custom slugs for each backend: backend_config : pandoc : slug : !slug - *title - *version - !date mkdocs : slug : my_awesome_project Version \u00b6 Config example: version : !version [ 1 , 0 , 5 ] Resulting version: 1 . 0 . 5 If you wish to use the number of commits in the current branch as a part of your version, add the !commit_count tag: version : !version - 1 - !commit_count Resulting version: 1 . 85 The !commit_count tag accepts two arguments: name of the branch to count commits in; correction\u2014a positive or negative number to adjust the commit count. Suppose you want to bump the major version and start counting commits from the beginning. Also you want to use only number of commits in the master branch. So your config will look like this: version : !version - 2 - !commit_count master -85 Result: 2 . 0","title":"Slugs"},{"location":"config/slugs/#slugs","text":"Slugs is an extension for Foliant to generate custom slugs from arbitrary lists of values. It resolves !slug , !date , !version , and !commit_count YAML tags in the project config. The list of values after the !slug tag is replaced with the string that joins these values using - delimeter. Spaces ( ) in the values are replaced with underscores ( _ ). The value of the node that contains the !date tag is replaced with the current local date. The list of values after the !version tag is replaced with the string that joins these values using . delimeter. The value of the node that contains the !commit_count tag is replaced by the number of commits in the current Git repository.","title":"Slugs"},{"location":"config/slugs/#installation","text":"$ pip install foliantcontrib.slugs","title":"Installation"},{"location":"config/slugs/#usage","text":"","title":"Usage"},{"location":"config/slugs/#slug","text":"Config example: title : &title My Awesome Project version : &version 1.0 slug : !slug - *title - *version - !date Example of the resulting slug: My_Awesome_Project - 1 . 0 - 2018 - 05 - 10 Note that backends allow to override the top-level slug, so you may define different custom slugs for each backend: backend_config : pandoc : slug : !slug - *title - *version - !date mkdocs : slug : my_awesome_project","title":"Slug"},{"location":"config/slugs/#version","text":"Config example: version : !version [ 1 , 0 , 5 ] Resulting version: 1 . 0 . 5 If you wish to use the number of commits in the current branch as a part of your version, add the !commit_count tag: version : !version - 1 - !commit_count Resulting version: 1 . 85 The !commit_count tag accepts two arguments: name of the branch to count commits in; correction\u2014a positive or negative number to adjust the commit count. Suppose you want to bump the major version and start counting commits from the beginning. Also you want to use only number of commits in the master branch. So your config will look like this: version : !version - 2 - !commit_count master -85 Result: 2 . 0","title":"Version"},{"location":"preprocessors/admonitions/","text":"Admonitions \u00b6 $https://github.com/foliant-docs/foliantcontrib.admonitions.git$README.md","title":"Admonitions"},{"location":"preprocessors/admonitions/#admonitions","text":"$https://github.com/foliant-docs/foliantcontrib.admonitions.git$README.md","title":"Admonitions"},{"location":"preprocessors/anchors/","text":"Anchors \u00b6 $https://github.com/foliant-docs/foliantcontrib.anchors.git$README.md","title":"Anchors"},{"location":"preprocessors/anchors/#anchors","text":"$https://github.com/foliant-docs/foliantcontrib.anchors.git$README.md","title":"Anchors"},{"location":"preprocessors/apilinks/","text":"APILinks \u00b6 $https://github.com/foliant-docs/foliantcontrib.apilinks.git$README.md","title":"APILinks"},{"location":"preprocessors/apilinks/#apilinks","text":"$https://github.com/foliant-docs/foliantcontrib.apilinks.git$README.md","title":"APILinks"},{"location":"preprocessors/badges/","text":"Badges \u00b6 $https://github.com/foliant-docs/foliantcontrib.badges.git$README.md","title":"Badges"},{"location":"preprocessors/badges/#badges","text":"$https://github.com/foliant-docs/foliantcontrib.badges.git$README.md","title":"Badges"},{"location":"preprocessors/bindsympli/","text":"BindSympli \u00b6 $https://github.com/foliant-docs/foliantcontrib.bindsympli.git$README.md","title":"BindSympli"},{"location":"preprocessors/bindsympli/#bindsympli","text":"$https://github.com/foliant-docs/foliantcontrib.bindsympli.git$README.md","title":"BindSympli"},{"location":"preprocessors/blockdiag/","text":"Blockdiag \u00b6 $https://github.com/foliant-docs/foliantcontrib.blockdiag.git$README.md","title":"Blockdiag"},{"location":"preprocessors/blockdiag/#blockdiag","text":"$https://github.com/foliant-docs/foliantcontrib.blockdiag.git$README.md","title":"Blockdiag"},{"location":"preprocessors/csvtables/","text":"CSVTables \u00b6 $https://github.com/foliant-docs/foliantcontrib.csvtables.git$README.md","title":"CSVTables"},{"location":"preprocessors/csvtables/#csvtables","text":"$https://github.com/foliant-docs/foliantcontrib.csvtables.git$README.md","title":"CSVTables"},{"location":"preprocessors/customids/","text":"CustomIDs \u00b6 $https://github.com/foliant-docs/foliantcontrib.customids.git$README.md","title":"CustomIDs"},{"location":"preprocessors/customids/#customids","text":"$https://github.com/foliant-docs/foliantcontrib.customids.git$README.md","title":"CustomIDs"},{"location":"preprocessors/epsconvert/","text":"Epsconvert \u00b6 $https://github.com/foliant-docs/foliantcontrib.epsconvert.git$README.md","title":"Epsconvert"},{"location":"preprocessors/epsconvert/#epsconvert","text":"$https://github.com/foliant-docs/foliantcontrib.epsconvert.git$README.md","title":"Epsconvert"},{"location":"preprocessors/escapecode/","text":"EscapeCode and UnescapeCode \u00b6 $https://github.com/foliant-docs/foliantcontrib.escapecode.git$README.md","title":"EscapeCode and UnescapeCode"},{"location":"preprocessors/escapecode/#escapecode-and-unescapecode","text":"$https://github.com/foliant-docs/foliantcontrib.escapecode.git$README.md","title":"EscapeCode and UnescapeCode"},{"location":"preprocessors/flags/","text":"Flags \u00b6 $https://github.com/foliant-docs/foliantcontrib.flags.git$README.md","title":"Flags"},{"location":"preprocessors/flags/#flags","text":"$https://github.com/foliant-docs/foliantcontrib.flags.git$README.md","title":"Flags"},{"location":"preprocessors/flatten/","text":"Flatten \u00b6 $https://github.com/foliant-docs/foliantcontrib.flatten.git$README.md","title":"Flatten"},{"location":"preprocessors/flatten/#flatten","text":"$https://github.com/foliant-docs/foliantcontrib.flatten.git$README.md","title":"Flatten"},{"location":"preprocessors/general_notes/","text":"General Notes on Usage \u00b6 Most simple preprocessors apply unconditionally to the whole content of each Markdown file in the Foliant project. But usually preprocessors look for some specific pseudo-XML tags in Markdown content. Each preprocessor registers its own set of tags. Tags can have attributes and a body. Attributes are usually used to specify some required or optional parameters. Body is the content that is enclosed between opening and closing tags; preprocessors usually do something with this content: <tag attribute_1= \"value_1\" ... attribute_N= \"value_N\" > body </tag> Foliant under 1.0.8 tries to convert each attribute value into a boolean value, a number, or a string. Attribute values must be enclosed in double quotes ( \" ). Since Foliant 1.0.9, attribute values are processed as YAML. Scalar values are also converted into boolean values, numbers and strings, but you may specify composite values that should be transformed into lists or dictionaries. You may also use modifiers (i.e. YAML tags) that are available in the Foliant project\u2019s config. !path The string preceded by this modifier should be converted into an existing path relative to the Foliant project\u2019s top-level (\u201croot\u201d) directory. !project_path The string preceded by this modifier should be converted into a path relative to the Foliant project\u2019s top-level (\u201croot\u201d) directory. This path may be nonexistent. !rel_path The string preceded by this modifier should be converted into a path relative to the currently processed Markdown file. This path may be nonexistent. If you develop a preprocessor that accepts some path, by default it is better to be a path relative to the currently processed Markdown file. Also, since Foliant 1.0.9, attribute values may be enclosed into double ( \" ) or single ( ' ) quotes.","title":"General Notes"},{"location":"preprocessors/general_notes/#general-notes-on-usage","text":"Most simple preprocessors apply unconditionally to the whole content of each Markdown file in the Foliant project. But usually preprocessors look for some specific pseudo-XML tags in Markdown content. Each preprocessor registers its own set of tags. Tags can have attributes and a body. Attributes are usually used to specify some required or optional parameters. Body is the content that is enclosed between opening and closing tags; preprocessors usually do something with this content: <tag attribute_1= \"value_1\" ... attribute_N= \"value_N\" > body </tag> Foliant under 1.0.8 tries to convert each attribute value into a boolean value, a number, or a string. Attribute values must be enclosed in double quotes ( \" ). Since Foliant 1.0.9, attribute values are processed as YAML. Scalar values are also converted into boolean values, numbers and strings, but you may specify composite values that should be transformed into lists or dictionaries. You may also use modifiers (i.e. YAML tags) that are available in the Foliant project\u2019s config. !path The string preceded by this modifier should be converted into an existing path relative to the Foliant project\u2019s top-level (\u201croot\u201d) directory. !project_path The string preceded by this modifier should be converted into a path relative to the Foliant project\u2019s top-level (\u201croot\u201d) directory. This path may be nonexistent. !rel_path The string preceded by this modifier should be converted into a path relative to the currently processed Markdown file. This path may be nonexistent. If you develop a preprocessor that accepts some path, by default it is better to be a path relative to the currently processed Markdown file. Also, since Foliant 1.0.9, attribute values may be enclosed into double ( \" ) or single ( ' ) quotes.","title":"General Notes on Usage"},{"location":"preprocessors/glossary/","text":"Glossary \u00b6 $https://github.com/foliant-docs/foliantcontrib.glossary.git$README.md","title":"Glossary"},{"location":"preprocessors/glossary/#glossary","text":"$https://github.com/foliant-docs/foliantcontrib.glossary.git$README.md","title":"Glossary"},{"location":"preprocessors/graphviz/","text":"Graphviz \u00b6 $https://github.com/foliant-docs/foliantcontrib.graphviz.git$README.md","title":"Graphviz"},{"location":"preprocessors/graphviz/#graphviz","text":"$https://github.com/foliant-docs/foliantcontrib.graphviz.git$README.md","title":"Graphviz"},{"location":"preprocessors/history/","text":"History \u00b6 $https://github.com/foliant-docs/foliantcontrib.history.git$README.md","title":"History"},{"location":"preprocessors/history/#history","text":"$https://github.com/foliant-docs/foliantcontrib.history.git$README.md","title":"History"},{"location":"preprocessors/imagemagick/","text":"ImageMagick \u00b6 $https://github.com/foliant-docs/foliantcontrib.imagemagick.git$README.md","title":"ImageMagick"},{"location":"preprocessors/imagemagick/#imagemagick","text":"$https://github.com/foliant-docs/foliantcontrib.imagemagick.git$README.md","title":"ImageMagick"},{"location":"preprocessors/imgcaptions/","text":"ImgCaptions \u00b6 $https://github.com/foliant-docs/foliantcontrib.imgcaptions.git$README.md","title":"ImgCaptions"},{"location":"preprocessors/imgcaptions/#imgcaptions","text":"$https://github.com/foliant-docs/foliantcontrib.imgcaptions.git$README.md","title":"ImgCaptions"},{"location":"preprocessors/imgconvert/","text":"ImgConvert \u00b6 $https://github.com/foliant-docs/foliantcontrib.imgconvert.git$README.md","title":"ImgConvert"},{"location":"preprocessors/imgconvert/#imgconvert","text":"$https://github.com/foliant-docs/foliantcontrib.imgconvert.git$README.md","title":"ImgConvert"},{"location":"preprocessors/includes/","text":"Includes \u00b6 $https://github.com/foliant-docs/foliantcontrib.includes.git$README.md","title":"Includes"},{"location":"preprocessors/includes/#includes","text":"$https://github.com/foliant-docs/foliantcontrib.includes.git$README.md","title":"Includes"},{"location":"preprocessors/macros/","text":"Macros \u00b6 $https://github.com/foliant-docs/foliantcontrib.macros.git$README.md","title":"Macros"},{"location":"preprocessors/macros/#macros","text":"$https://github.com/foliant-docs/foliantcontrib.macros.git$README.md","title":"Macros"},{"location":"preprocessors/mermaid/","text":"Mermaid \u00b6 Mermaid Diagrams Preprocessor for Foliant \u00b6 Mermaid is an open source diagram visualization tool. This preprocessor converts Mermaid diagram definitions in your Markdown files into images on the fly during project build. Installation \u00b6 $ pip install foliantcontrib.mermaid Please note that to use this preprocessor you will also need to install Mermaid and Mermaid CLI: $ npm install mermaid # installs locally $ npm install mermaid.cli Config \u00b6 To enable the preprocessor, add mermaid to preprocessors section in the project config: preprocessors : - mermaid The preprocessor has a number of options: preprocessors : - mermaid : cache_dir : !path .diagramscache mermaid_path : !path node_modules/.bin/mmdc format : svg params : ... cache_dir Path to the directory with the generated diagrams. It can be a path relative to the project root or a global one; you can use ~/ shortcut. To save time during build, only new and modified diagrams are rendered. The generated images are cached and reused in future builds. mermaid_path Path to Mermaid CLI binary. If you installed Mermaid locally this parameter is required. Default: mmdc . format Generated image format. Available: svg , png , pdf . Default svg . params Params passed to the image generation command: preprocessors : - mermaid : params : theme : forest To see the full list of available params, run mmdc -h or check here . Usage \u00b6 To insert a diagram definition in your Markdown source, enclose it between <mermaid>...</mermaid> tags: Here\u2019s a diagram: <mermaid> graph TD; A-->B; </mermaid> You can set any parameters in the tag options. Tag options have priority over the config options so you can override some values for specific diagrams while having the default ones set up in the config. Tags also have an exclusive option caption \u2014 the markdown caption of the diagram image. Diagram with a caption: <mermaid caption= \"Deployment diagram\" params= \"theme: dark\" > </mermaid> Note that command params listed in the params option are stated in YAML format. Remember that YAML is sensitive to indentation so for several params it is more suitable to use JSON-like mappings: {key1: 1, key2: 'value2'} .","title":"Mermaid"},{"location":"preprocessors/mermaid/#mermaid","text":"","title":"Mermaid"},{"location":"preprocessors/mermaid/#mermaid-diagrams-preprocessor-for-foliant","text":"Mermaid is an open source diagram visualization tool. This preprocessor converts Mermaid diagram definitions in your Markdown files into images on the fly during project build.","title":"Mermaid Diagrams Preprocessor for Foliant"},{"location":"preprocessors/mermaid/#installation","text":"$ pip install foliantcontrib.mermaid Please note that to use this preprocessor you will also need to install Mermaid and Mermaid CLI: $ npm install mermaid # installs locally $ npm install mermaid.cli","title":"Installation"},{"location":"preprocessors/mermaid/#config","text":"To enable the preprocessor, add mermaid to preprocessors section in the project config: preprocessors : - mermaid The preprocessor has a number of options: preprocessors : - mermaid : cache_dir : !path .diagramscache mermaid_path : !path node_modules/.bin/mmdc format : svg params : ... cache_dir Path to the directory with the generated diagrams. It can be a path relative to the project root or a global one; you can use ~/ shortcut. To save time during build, only new and modified diagrams are rendered. The generated images are cached and reused in future builds. mermaid_path Path to Mermaid CLI binary. If you installed Mermaid locally this parameter is required. Default: mmdc . format Generated image format. Available: svg , png , pdf . Default svg . params Params passed to the image generation command: preprocessors : - mermaid : params : theme : forest To see the full list of available params, run mmdc -h or check here .","title":"Config"},{"location":"preprocessors/mermaid/#usage","text":"To insert a diagram definition in your Markdown source, enclose it between <mermaid>...</mermaid> tags: Here\u2019s a diagram: <mermaid> graph TD; A-->B; </mermaid> You can set any parameters in the tag options. Tag options have priority over the config options so you can override some values for specific diagrams while having the default ones set up in the config. Tags also have an exclusive option caption \u2014 the markdown caption of the diagram image. Diagram with a caption: <mermaid caption= \"Deployment diagram\" params= \"theme: dark\" > </mermaid> Note that command params listed in the params option are stated in YAML format. Remember that YAML is sensitive to indentation so for several params it is more suitable to use JSON-like mappings: {key1: 1, key2: 'value2'} .","title":"Usage"},{"location":"preprocessors/multilinetables/","text":"MultilineTables \u00b6 $https://github.com/foliant-docs/foliantcontrib.multilinetables.git$README.md","title":"MultilineTables"},{"location":"preprocessors/multilinetables/#multilinetables","text":"$https://github.com/foliant-docs/foliantcontrib.multilinetables.git$README.md","title":"MultilineTables"},{"location":"preprocessors/pgsqldoc/","text":"Pgsqldoc \u00b6 $https://github.com/foliant-docs/foliantcontrib.pgsqldoc.git$README.md","title":"Pgsqldoc"},{"location":"preprocessors/pgsqldoc/#pgsqldoc","text":"$https://github.com/foliant-docs/foliantcontrib.pgsqldoc.git$README.md","title":"Pgsqldoc"},{"location":"preprocessors/plantuml/","text":"Plantuml \u00b6 $https://github.com/foliant-docs/foliantcontrib.plantuml.git$README.md","title":"Plantuml"},{"location":"preprocessors/plantuml/#plantuml","text":"$https://github.com/foliant-docs/foliantcontrib.plantuml.git$README.md","title":"Plantuml"},{"location":"preprocessors/replace/","text":"Replace \u00b6 $https://github.com/foliant-docs/foliantcontrib.replace.git$README.md","title":"Replace"},{"location":"preprocessors/replace/#replace","text":"$https://github.com/foliant-docs/foliantcontrib.replace.git$README.md","title":"Replace"},{"location":"preprocessors/repolink/","text":"RepoLink \u00b6 $https://github.com/foliant-docs/foliantcontrib.multiproject.git$README.md#RepoLink Preprocessor:Usage of the Preprocessor Installation \u00b6 RepoLink preprocessor is a part of MultiProject extension: $https://github.com/foliant-docs/foliantcontrib.multiproject.git$README.md#Installation:Config Extension to Resolve the !from Tag Usage \u00b6 $https://github.com/foliant-docs/foliantcontrib.multiproject.git$README.md#Usage of the Preprocessor","title":"RepoLink"},{"location":"preprocessors/repolink/#repolink","text":"$https://github.com/foliant-docs/foliantcontrib.multiproject.git$README.md#RepoLink Preprocessor:Usage of the Preprocessor","title":"RepoLink"},{"location":"preprocessors/repolink/#installation","text":"RepoLink preprocessor is a part of MultiProject extension: $https://github.com/foliant-docs/foliantcontrib.multiproject.git$README.md#Installation:Config Extension to Resolve the !from Tag","title":"Installation"},{"location":"preprocessors/repolink/#usage","text":"$https://github.com/foliant-docs/foliantcontrib.multiproject.git$README.md#Usage of the Preprocessor","title":"Usage"},{"location":"preprocessors/runcommands/","text":"RunCommands \u00b6 $https://github.com/foliant-docs/foliantcontrib.runcommands.git$README.md","title":"RunCommands"},{"location":"preprocessors/runcommands/#runcommands","text":"$https://github.com/foliant-docs/foliantcontrib.runcommands.git$README.md","title":"RunCommands"},{"location":"preprocessors/swaggerdoc/","text":"SwaggerDoc \u00b6 $https://github.com/foliant-docs/foliantcontrib.swaggerdoc.git$README.md","title":"SwaggerDoc"},{"location":"preprocessors/swaggerdoc/#swaggerdoc","text":"$https://github.com/foliant-docs/foliantcontrib.swaggerdoc.git$README.md","title":"SwaggerDoc"},{"location":"preprocessors/templateparser/","text":"TemplateParser \u00b6 $https://github.com/foliant-docs/foliantcontrib.templateparser.git$README.md","title":"TemplateParser"},{"location":"preprocessors/templateparser/#templateparser","text":"$https://github.com/foliant-docs/foliantcontrib.templateparser.git$README.md","title":"TemplateParser"},{"location":"preprocessors/testrail/","text":"Testrail \u00b6 $https://github.com/foliant-docs/foliantcontrib.testrail.git$README.md","title":"Testrail"},{"location":"preprocessors/testrail/#testrail","text":"$https://github.com/foliant-docs/foliantcontrib.testrail.git$README.md","title":"Testrail"}]}